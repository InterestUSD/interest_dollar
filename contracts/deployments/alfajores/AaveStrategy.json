{
  "address": "0x8238eEeFbC804BA97610CCFCDF2e38998b9D4cB9",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "collectRewardToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "setRewardPoolAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setSecondaryRewardTokenAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setUniswapAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        }
      ],
      "name": "setRewardTokenAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_ubeStakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken2Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondaryRewardTokenAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRewardLiquidationThreshold",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "setStakingAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    }
  ],
  "transactionHash": "0xfc15e26aff75186af7677f53109665ec3a7939dfaa79b17996714a0983bb390e",
  "receipt": {
    "to": null,
    "from": "0x3084F0b94d41111526f8d1e5fFf43e1752907d48",
    "contractAddress": "0x8238eEeFbC804BA97610CCFCDF2e38998b9D4cB9",
    "transactionIndex": 2,
    "gasUsed": "3665818",
    "logsBloom": "0x
    "blockHash": "0xb669cf4ac49d5227d71ae8befb1667257072cf9d19b302f1fe2bd0fcc5825f09",
    "transactionHash": "0xfc15e26aff75186af7677f53109665ec3a7939dfaa79b17996714a0983bb390e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 6734935,
        "transactionHash": "0xfc15e26aff75186af7677f53109665ec3a7939dfaa79b17996714a0983bb390e",
        "address": "0x8238eEeFbC804BA97610CCFCDF2e38998b9D4cB9",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003084f0b94d41111526f8d1e5fff43e1752907d48"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xb669cf4ac49d5227d71ae8befb1667257072cf9d19b302f1fe2bd0fcc5825f09"
      }
    ],
    "blockNumber": 6734935,
    "cumulativeGasUsed": "3954682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "19f61395f16c024a9cec84b97c17c7b9",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"collectRewardToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setSecondaryRewardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setUniswapAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"setRewardTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_ubeStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken2Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondaryRewardTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRewardLiquidationThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform\",\"params\":{\"_asset\":\"Address of the asset\"},\"return\":\"balance    Total value of the asset in the platform\"},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardToken()\":{\"details\":\"Collect accumulated reward token and send to Vault. If there is a secondary reward token, swap it for primary reward token also\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into Aave\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"},\"return\":\"amountDeposited Amount of asset that was deposited\"},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into Aave\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address,address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"jGeneric platform address\",\"_rewardTokenAddress\":\"Address of reward token for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"initialize(address,address,address,address[],address[],address,address,address,address)\":{\"params\":{\"_assets\":\"Addresses of supported assets. MUST be passed in the same               order as returned by coins on the pool contract, i.e.               cUSD, cEUR.\",\"_liquidityToken1Address\":\"Address of native asset for first AToken for reward LP Pool, i.e cUSD\",\"_liquidityToken2Address\":\"Address of native asset for second AToken for reward LP Pool, i.e cEUR\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Address of the Aave/Moola lending pool\",\"_rewardTokenAddress\":\"Address of MOO\",\"_secondaryRewardTokenAddress\":\"Address of secondary reward token if any, else set this to 0x0\",\"_ubeStakingAddress\":\"Address of Ubeswap LP Tokens Staking contract\",\"_vaultAddress\":\"Address of the vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.     This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding aToken,     if for some reason is it necessary.\"},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.     This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setRewardLiquidationThreshold(uint256)\":{\"details\":\"Set the reward token liquidation threshold.\",\"params\":{\"_threshold\":\"Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls.\"}},\"setRewardPoolAddress(address,address)\":{\"details\":\"Set the reward Uniswap Pool address Stable tokens for which corresponding ATokens pair exists\"},\"setRewardTokenAddress(address)\":{\"details\":\"Set the reward token address.\",\"params\":{\"_rewardTokenAddress\":\"Address of the reward token\"}},\"setSecondaryRewardTokenAddress(address)\":{\"details\":\"Set the secondary reward token address in case staking contract reward dual reward token\"},\"setStakingAddress(address)\":{\"details\":\"Set the staking contract address.\"},\"setUniswapAddress(address)\":{\"details\":\"Set the UniswapV2 Router Address.\"},\"supportsAsset(address)\":{\"details\":\"Retuns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in     strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from Aave\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"},\"return\":\"amountWithdrawn Amount of asset that was withdrawn\"},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send them to Vault contract.\"}}},\"userdoc\":{\"methods\":{\"initialize(address,address,address,address[],address[],address,address,address,address)\":{\"notice\":\"Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Aave/Moola strategies don't fit well within that abstraction.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveStrategy.sol\":\"AaveStrategy\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11\"},\"@openzeppelin/upgrades/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"contracts/governance/Governable.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Origin Protocol Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"OUSD.governor\\\");\\n    bytes32\\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\\n\\n    // keccak256(\\\"OUSD.pending.governor\\\");\\n    bytes32\\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\\n\\n    // keccak256(\\\"OUSD.reentry.status\\\");\\n    bytes32\\n        private constant reentryStatusPosition = 0x53bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac4535;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() internal {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x3e51ea48102945bf4b305bf9722a07514a585a29555d92f8c84352d1a4cfcee1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in cUSD, 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb730bfb909decb25b19d598a592beb49ab6c825274cff411e71dee42e5b2b2f0\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IRegistry {\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x293db0123a841530c2ee31864feed3c80ada82ca9c6ae24c4e92dc5f658715d4\"},\"contracts/interfaces/ISortedOracles.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface ISortedOracles {\\n    function medianRate(address) external view returns (uint256, uint256);\\n\\n    function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5190bc150c55411bab3a5a19325923e26315028410935aa35b8dff27837844f2\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IStakingRewards {\\n    // Views\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    // Mutative\\n\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function getReward() external;\\n}\\n\",\"keccak256\":\"0xd3b589e8c78c08129b01e174e246493da65f1dd82705e5f6912d1d207cd4e55b\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event DepositsPaused();\\n    event DepositsUnpaused();\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setUniswapAddr(address _address) external;\\n\\n    function uniswapAddr() external view returns (address);\\n\\n    function setCeloGoldAddr(address _address) external;\\n\\n    function celoGoldAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function harvest(address _strategyAddr) external;\\n\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function mintMultiple(\\n        address[] calldata _assets,\\n        uint256[] calldata _amount,\\n        uint256 _minimumOusdAmount\\n    ) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance() external view returns (uint256);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9ff3a77323a5d02f6de633c206720cdf3f9b03cdfc3b515425ecadd388862a96\"},\"contracts/interfaces/uniswap/IUniswapV2ERC20.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xabdf035067362a2fb174a4ce3fb2d58ecf19983bac03b278431dc168c513163d\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function factory() external pure returns (address);\\n\\n    function pairFor(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x2539886790093dc6528e792474f73d170f51d1dee8b44bc7d28552a5a483965c\"},\"contracts/strategies/AaveStrategy.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @title OUSD Aave Strategy\\n * @notice Investment strategy for investing stablecoins via Aave\\n * @author Origin Protocol Inc\\n */\\nimport \\\"./IAave.sol\\\";\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2ERC20 } from \\\"../interfaces/uniswap/IUniswapV2ERC20.sol\\\";\\nimport { IStakingRewards } from \\\"../interfaces/IStakingRewards.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { UsingRegistry } from \\\"../utils/UsingRegistry.sol\\\";\\n\\ncontract AaveStrategy is InitializableAbstractStrategy, UsingRegistry {\\n    uint16 private referralCode;\\n    address private uniswapAddr;\\n    address private ubeStakingAddress;\\n    address private rewardPoolAddress;\\n    address private secondaryRewardTokenAddress;\\n    // Note: this is a mapping of native asset to native asset (like cUSD-cEUR), not ATokens\\n    mapping(address => address) private rewardLiquidityPair;\\n\\n    /**\\n     * @dev Set the UniswapV2 Router Address.\\n     */\\n    function setUniswapAddress(address _router) external onlyGovernor {\\n        uniswapAddr = _router;\\n    }\\n\\n    /**\\n     * @dev Set the secondary reward token address in case staking contract\\n     * reward dual reward token\\n     */\\n    function setSecondaryRewardTokenAddress(address _token)\\n        external\\n        onlyGovernor\\n    {\\n        secondaryRewardTokenAddress = _token;\\n    }\\n\\n    /**\\n     * @dev Set the staking contract address.\\n     */\\n    function setStakingAddress(address _staking) external onlyGovernor {\\n        ubeStakingAddress = _staking;\\n    }\\n\\n    /**\\n     * @dev Set the reward Uniswap Pool address\\n     * Stable tokens for which corresponding ATokens pair exists\\n     */\\n    function setRewardPoolAddress(address _token1, address _token2)\\n        external\\n        onlyGovernor\\n    {\\n        // Get the Pool address for pair\\n        address lpPair = IUniswapV2Router(uniswapAddr).pairFor(\\n            address(_getATokenFor(_token1)),\\n            address(_getATokenFor(_token2))\\n        );\\n\\n        // safe approve LP Tokens for staking contract\\n        IUniswapV2ERC20(lpPair).approve(ubeStakingAddress, 0);\\n        IUniswapV2ERC20(lpPair).approve(ubeStakingAddress, uint256(-1));\\n\\n        rewardLiquidityPair[_token1] = _token2;\\n        rewardLiquidityPair[_token2] = _token1;\\n\\n        rewardPoolAddress = lpPair;\\n    }\\n\\n    /**\\n     * Initializer for setting up strategy internal state. This overrides the\\n     * InitializableAbstractStrategy initializer as Aave/Moola strategies don't fit\\n     * well within that abstraction.\\n     * @param _platformAddress Address of the Aave/Moola lending pool\\n     * @param _vaultAddress Address of the vault\\n     * @param _rewardTokenAddress Address of MOO\\n     * @param _assets Addresses of supported assets. MUST be passed in the same\\n     *                order as returned by coins on the pool contract, i.e.\\n     *                cUSD, cEUR.\\n     * @param _pTokens Platform Token corresponding addresses\\n     * @param _ubeStakingAddress Address of Ubeswap LP Tokens Staking contract\\n     * @param _liquidityToken1Address Address of native asset for first AToken for reward LP Pool, i.e cUSD\\n     * @param _liquidityToken2Address Address of native asset for second AToken for reward LP Pool, i.e cEUR\\n     * @param _secondaryRewardTokenAddress Address of secondary reward token if any, else set this to 0x0\\n     */\\n    function initialize(\\n        address _platformAddress, // Aave/Moola address\\n        address _vaultAddress,\\n        address _rewardTokenAddress, // MOO\\n        address[] calldata _assets,\\n        address[] calldata _pTokens,\\n        address _ubeStakingAddress,\\n        address _liquidityToken1Address, // cUSD\\n        address _liquidityToken2Address, // cEUR\\n        address _secondaryRewardTokenAddress // UBE\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddress,\\n            _assets,\\n            _pTokens\\n        );\\n\\n        // set uniswap addr\\n        uniswapAddr = IVault(vaultAddress).uniswapAddr();\\n\\n        // set referal code\\n        referralCode = 0;\\n\\n        ubeStakingAddress = _ubeStakingAddress;\\n        secondaryRewardTokenAddress = _secondaryRewardTokenAddress;\\n\\n        // Set the Pool address for AToken pair\\n        rewardPoolAddress = IUniswapV2Router(uniswapAddr).pairFor(\\n            address(_getATokenFor(_liquidityToken1Address)),\\n            address(_getATokenFor(_liquidityToken2Address))\\n        );\\n\\n        // safe approve LP Tokens for staking contract\\n        IUniswapV2ERC20(rewardPoolAddress).approve(ubeStakingAddress, 0);\\n        IUniswapV2ERC20(rewardPoolAddress).approve(\\n            ubeStakingAddress,\\n            uint256(-1)\\n        );\\n\\n        // safe approve LP Tokens for ubeswap router\\n        IUniswapV2ERC20(rewardPoolAddress).approve(uniswapAddr, 0);\\n        IUniswapV2ERC20(rewardPoolAddress).approve(uniswapAddr, uint256(-1));\\n\\n        // safe approve ATokens for providing uniswap liquidity\\n        for (uint256 i = 0; i < _pTokens.length; i++) {\\n            IERC20(_pTokens[i]).approve(uniswapAddr, uint256(-1));\\n        }\\n\\n        rewardLiquidityPair[_liquidityToken1Address] = _liquidityToken2Address;\\n        rewardLiquidityPair[_liquidityToken2Address] = _liquidityToken1Address;\\n    }\\n\\n    function _provideLiquidity(address _asset) internal {\\n        address _assetPair = rewardLiquidityPair[_asset];\\n        IVault vault = IVault(vaultAddress);\\n        IOracle oracle = IOracle(vault.priceProvider());\\n        // calculate asset pair quote\\n        uint256 _price1 = oracle.price(_asset);\\n        uint256 _price2 = oracle.price(_assetPair);\\n        uint256 price = _price1.mul(1 ether).div(_price2);\\n        uint256 priceInv = _price2.mul(1 ether).div(_price1);\\n\\n        IAaveAToken aToken1 = _getATokenFor(_asset);\\n        IAaveAToken aToken2 = _getATokenFor(_assetPair);\\n\\n        // if no tokens to provide liquidity, simply return\\n        if (\\n            aToken1.balanceOf(address(this)) == uint256(0) ||\\n            aToken2.balanceOf(address(this)) == uint256(0)\\n        ) return;\\n\\n        uint256 aToken1Desired = aToken1.balanceOf(address(this));\\n        uint256 aToken2Desired = aToken1\\n            .balanceOf(address(this))\\n            .mul(price)\\n            .div(1 ether);\\n        if (aToken2.balanceOf(address(this)) < aToken2Desired) {\\n            aToken2Desired = aToken2.balanceOf(address(this));\\n            aToken1Desired = aToken2.balanceOf(address(this)).mul(priceInv).div(\\n                    1 ether\\n                );\\n        }\\n\\n        IUniswapV2Router router = IUniswapV2Router(uniswapAddr);\\n        // add liquidity to ATokens Pool\\n        router.addLiquidity(\\n            address(aToken1),\\n            address(aToken2),\\n            aToken1Desired,\\n            aToken2Desired,\\n            uint256(0),\\n            uint256(0),\\n            address(this),\\n            now.add(1800)\\n        );\\n    }\\n\\n    function _removeLiquidity(address _asset) internal {\\n        address _assetPair = rewardLiquidityPair[_asset];\\n        IUniswapV2ERC20 lpToken = IUniswapV2ERC20(rewardPoolAddress);\\n        IAaveAToken aToken1 = _getATokenFor(_asset);\\n        IAaveAToken aToken2 = _getATokenFor(_assetPair);\\n\\n        IUniswapV2Router router = IUniswapV2Router(uniswapAddr);\\n        uint256 liquidity = lpToken.balanceOf(address(this));\\n\\n        if (liquidity != uint256(0)) {\\n            router.removeLiquidity(\\n                address(aToken1),\\n                address(aToken2),\\n                liquidity,\\n                uint256(0),\\n                uint256(0),\\n                address(this),\\n                now.add(1800)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Calculate the amount of token pair for given amount of LP Tokens\\n     * @param _asset Address of Pair Token0\\n     * @param liquidity Amount of LP Tokens\\n     */\\n    function _checkLPBalance(address _asset, uint256 liquidity)\\n        internal\\n        view\\n        returns (uint256 amount)\\n    {\\n        require(\\n            rewardLiquidityPair[_asset] != address(0),\\n            \\\"AaveStrategy: Assets not part of LP Pair\\\"\\n        );\\n\\n        require(\\n            liquidity != uint256(0),\\n            \\\"AaveStrategy::_checkLPBalance: liquidity should be greater than 0\\\"\\n        );\\n\\n        address aTokenAddr = assetToPToken[_asset];\\n        uint256 balance = IERC20(aTokenAddr).balanceOf(rewardPoolAddress);\\n        uint256 _totalSupply = IUniswapV2ERC20(rewardPoolAddress).totalSupply();\\n\\n        // Just to be sure, incase totalSupply is zero\\n        if (_totalSupply != uint256(0)) {\\n            amount = liquidity.mul(balance) / _totalSupply;\\n        }\\n    }\\n\\n    function _stakeLPTokens() internal {\\n        uint256 lpAmount = IUniswapV2ERC20(rewardPoolAddress).balanceOf(\\n            address(this)\\n        );\\n        if (lpAmount != uint256(0)) {\\n            IStakingRewards(ubeStakingAddress).stake(lpAmount);\\n        }\\n    }\\n\\n    function _unstakeLPTokens() internal {\\n        IStakingRewards staking = IStakingRewards(ubeStakingAddress);\\n        uint256 balance = staking.balanceOf(address(this));\\n        if (balance != uint256(0)) {\\n            staking.withdraw(balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     * If there is a secondary reward token, swap it for primary reward token also\\n     */\\n    function collectRewardToken() external onlyVault nonReentrant {\\n        // Claim rewards from staking contract\\n        IStakingRewards staking = IStakingRewards(ubeStakingAddress);\\n        staking.getReward();\\n\\n        if (\\n            secondaryRewardTokenAddress != address(0) &&\\n            IERC20(secondaryRewardTokenAddress).balanceOf(address(this)) !=\\n            uint256(0)\\n        ) {\\n            IERC20 secondaryToken = IERC20(secondaryRewardTokenAddress);\\n            // Give Uniswap full amount allowance\\n            secondaryToken.safeApprove(uniswapAddr, 0);\\n            secondaryToken.safeApprove(uniswapAddr, uint256(-1));\\n\\n            // Uniswap redemption path\\n            address[] memory path = new address[](3);\\n            path[0] = secondaryRewardTokenAddress;\\n            path[1] = IVault(vaultAddress).celoGoldAddr(); // CELO\\n            path[2] = rewardTokenAddress;\\n\\n            IUniswapV2Router(uniswapAddr).swapExactTokensForTokens(\\n                secondaryToken.balanceOf(address(this)),\\n                uint256(0),\\n                path,\\n                address(this),\\n                now.add(1800)\\n            );\\n        }\\n\\n        // Transfer primary rewardToken to Vault\\n        IERC20 rewardToken = IERC20(rewardTokenAddress);\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        emit RewardTokenCollected(vaultAddress, balance);\\n        rewardToken.safeTransfer(vaultAddress, balance);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Aave\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     * @return amountDeposited Amount of asset that was deposited\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into Aave\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     * @return amountDeposited Amount of asset that was deposited\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        IAaveAToken aToken = _getATokenFor(_asset);\\n        emit Deposit(_asset, address(aToken), _amount);\\n        _getLendingPool().deposit(_asset, _amount, referralCode);\\n\\n        if (ubeStakingAddress != address(0)) {\\n            _provideLiquidity(_asset);\\n            _stakeLPTokens();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into Aave\\n     */\\n    function depositAll() external onlyVault nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            uint256 balance = IERC20(assetsMapped[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                _deposit(assetsMapped[i], balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from Aave\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     * @return amountWithdrawn Amount of asset that was withdrawn\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        IAaveAToken aToken = _getATokenFor(_asset);\\n\\n        if (\\n            ubeStakingAddress != address(0) &&\\n            aToken.balanceOf(address(this)) <= _amount\\n        ) {\\n            _unstakeLPTokens();\\n            _removeLiquidity(_asset);\\n        }\\n\\n        emit Withdrawal(_asset, address(aToken), _amount);\\n        aToken.redeem(_amount);\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send them to Vault contract.\\n     */\\n    function withdrawAll() external onlyVaultOrGovernor nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            if (ubeStakingAddress != address(0)) {\\n                _unstakeLPTokens();\\n                _removeLiquidity(assetsMapped[i]);\\n            }\\n            // Redeem entire balance of aToken\\n            IAaveAToken aToken = _getATokenFor(assetsMapped[i]);\\n            uint256 balance = aToken.balanceOf(address(this));\\n            if (balance > 0) {\\n                aToken.redeem(balance);\\n                // Transfer entire balance to Vault\\n                IERC20 asset = IERC20(assetsMapped[i]);\\n                asset.safeTransfer(\\n                    vaultAddress,\\n                    asset.balanceOf(address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        // Balance is always with token aToken decimals\\n        IAaveAToken aToken = _getATokenFor(_asset);\\n        balance = aToken.balanceOf(address(this));\\n\\n        if (ubeStakingAddress != address(0)) {\\n            // If some LP Tokens are left, not staked\\n            uint256 lpBalance = IStakingRewards(ubeStakingAddress).balanceOf(\\n                address(this)\\n            );\\n            // LP Tokens staked in staking contract\\n            lpBalance.add(\\n                IUniswapV2ERC20(rewardPoolAddress).balanceOf(address(this))\\n            );\\n\\n            if (lpBalance != uint256(0)) {\\n                uint256 amountLP = _checkLPBalance(_asset, lpBalance);\\n                // NOTE: for some unkonwn reasons, add() is not working here\\n                // balance.add(amountLP);\\n                balance += amountLP;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retuns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset) external view returns (bool) {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding aToken,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens() external onlyGovernor nonReentrant {\\n        uint256 assetCount = assetsMapped.length;\\n        address lendingPoolVault = _getLendingPoolCore();\\n        // approve the pool to spend the bAsset\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            address asset = assetsMapped[i];\\n            // Safe approval\\n            IERC20(asset).safeApprove(lendingPoolVault, 0);\\n            IERC20(asset).safeApprove(lendingPoolVault, uint256(-1));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal method to respond to the addition of new asset / aTokens\\n     *      We need to approve the aToken and give it permission to spend the asset\\n     * @param _asset Address of the asset to approve\\n     * @param _aToken This aToken has the approval approval\\n     */\\n    function _abstractSetPToken(address _asset, address _aToken) internal {\\n        address lendingPoolVault = _getLendingPoolCore();\\n        IERC20(_asset).safeApprove(lendingPoolVault, 0);\\n        IERC20(_asset).safeApprove(lendingPoolVault, uint256(-1));\\n    }\\n\\n    /**\\n     * @dev Get the aToken wrapped in the ICERC20 interface for this asset.\\n     *      Fails if the pToken doesn't exist in our mappings.\\n     * @param _asset Address of the asset\\n     * @return Corresponding aToken to this asset\\n     */\\n    function _getATokenFor(address _asset) internal view returns (IAaveAToken) {\\n        address aToken = assetToPToken[_asset];\\n        require(aToken != address(0), \\\"aToken does not exist\\\");\\n        return IAaveAToken(aToken);\\n    }\\n\\n    /**\\n     * @dev Get the current address of the Aave lending pool, which is the gateway to\\n     *      depositing.\\n     * @return Current lending pool implementation\\n     */\\n    function _getLendingPool() internal view returns (IAaveLendingPool) {\\n        address lendingPool = ILendingPoolAddressesProvider(platformAddress)\\n            .getLendingPool();\\n        require(lendingPool != address(0), \\\"Lending pool does not exist\\\");\\n        return IAaveLendingPool(lendingPool);\\n    }\\n\\n    /**\\n     * @dev Get the current address of the Aave lending pool core, which stores all the\\n     *      reserve tokens in its vault.\\n     * @return Current lending pool core address\\n     */\\n    function _getLendingPoolCore() internal view returns (address payable) {\\n        address payable lendingPoolCore = ILendingPoolAddressesProvider(\\n            platformAddress\\n        ).getLendingPoolCore();\\n        require(\\n            lendingPoolCore != address(uint160(address(0))),\\n            \\\"Lending pool core does not exist\\\"\\n        );\\n        return lendingPoolCore;\\n    }\\n}\\n\",\"keccak256\":\"0x9038a0e64fa89c6b814cc8c60a13e7b08c1f2bd8d8d6e82deb68fcca21d1df2b\"},\"contracts/strategies/IAave.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n/**\\n * @dev Interface for Aaves A Token\\n * Documentation: https://developers.aave.com/#atokens\\n */\\ninterface IAaveAToken {\\n    /**\\n     * @notice Non-standard ERC20 function to redeem an _amount of aTokens for the underlying\\n     * asset, burning the aTokens during the process.\\n     * @param _amount Amount of aTokens\\n     */\\n    function redeem(uint256 _amount) external;\\n\\n    /**\\n     * @notice returns the current total aToken balance of _user all interest collected included.\\n     * To obtain the user asset principal balance with interests excluded , ERC20 non-standard\\n     * method principalBalanceOf() can be used.\\n     */\\n    function balanceOf(address _user) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://developers.aave.com/#lendingpool\\n */\\ninterface IAaveLendingPool {\\n    /**\\n     * @notice Deposits a certain _amount of an asset specified by the _reserve parameter.\\n     * @dev The caller receives a certain amount of corresponding aTokens in exchange.\\n     * The amount of aTokens received depends on the corresponding aToken exchange rate.\\n     * LendingPoolCore must be approved to spend this reserve\\n     */\\n    function deposit(\\n        address _reserve,\\n        uint256 _amount,\\n        uint16 _referralCode\\n    ) external;\\n}\\n\\n/**\\n * @dev Interface for Aaves Lending Pool\\n * Documentation: https://developers.aave.com/#lendingpooladdressesprovider\\n */\\ninterface ILendingPoolAddressesProvider {\\n    /**\\n     * @notice Get the current address for Aave LendingPool\\n     * @dev Lending pool is the core contract on which to call deposit\\n     */\\n    function getLendingPool() external view returns (address);\\n\\n    /**\\n     * @notice Get the address for lendingPoolCore\\n     * @dev IMPORTANT - this is where _reserve must be approved before deposit\\n     */\\n    function getLendingPoolCore() external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x1c8a38b23b72f6dad0b8eafb18ae847f6873c6c464cd16a1a12c8fe5703aed57\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/upgrades/contracts/Initializable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\ncontract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(address recipient, uint256 amount);\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Reward token address\\n    address public rewardTokenAddress;\\n    uint256 public rewardLiquidationThreshold;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress jGeneric platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddress Address of reward token for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address _rewardTokenAddress,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddress,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address _rewardTokenAddress,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddress = _rewardTokenAddress;\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardToken() external onlyVault nonReentrant {\\n        IERC20 rewardToken = IERC20(rewardTokenAddress);\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        emit RewardTokenCollected(vaultAddress, balance);\\n        rewardToken.safeTransfer(vaultAddress, balance);\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token address.\\n     * @param _rewardTokenAddress Address of the reward token\\n     */\\n    function setRewardTokenAddress(address _rewardTokenAddress)\\n        external\\n        onlyGovernor\\n    {\\n        rewardTokenAddress = _rewardTokenAddress;\\n    }\\n\\n    /**\\n     * @dev Set the reward token liquidation threshold.\\n     * @param _threshold Threshold amount in decimals of reward token that will\\n     * cause the Vault to claim and withdrawAll on allocate() calls.\\n     */\\n    function setRewardLiquidationThreshold(uint256 _threshold)\\n        external\\n        onlyGovernor\\n    {\\n        rewardLiquidationThreshold = _threshold;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken) internal;\\n\\n    function safeApproveAllTokens() external;\\n\\n    /**\\n     * @dev Deposit a amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5e83b89c411e2667ee30bffee1ba25df80e017d79f3e701551f0acfa82714108\"},\"contracts/utils/UsingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title Celo Registry Helper\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @author Ashutosh Varma (@ashutoshvarma)\\n */\\n\\nimport { IRegistry } from \\\"../interfaces/IRegistry.sol\\\";\\nimport { ISortedOracles } from \\\"../interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry {\\n    bytes32 constant GOLD_TOKEN_REGISTRY_ID = keccak256(\\n        abi.encodePacked(\\\"GoldToken\\\")\\n    );\\n    bytes32 constant STABLE_TOKEN_REGISTRY_ID = keccak256(\\n        abi.encodePacked(\\\"StableToken\\\")\\n    );\\n    bytes32 constant STABLE_EUR_TOKEN_REGISTRY_ID = keccak256(\\n        abi.encodePacked(\\\"StableTokenEUR\\\")\\n    );\\n    bytes32 constant SORTED_ORACLES_REGISTRY_ID = keccak256(\\n        abi.encodePacked(\\\"SortedOracles\\\")\\n    );\\n\\n    IRegistry public constant registry = IRegistry(\\n        0x000000000000000000000000000000000000ce10\\n    );\\n\\n    function getGoldToken() internal view returns (address) {\\n        return registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getStableToken() internal view returns (address) {\\n        return registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getStableTokenEUR() internal view returns (address) {\\n        return registry.getAddressForOrDie(STABLE_EUR_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getSortedOracles() internal view returns (ISortedOracles) {\\n        return\\n            ISortedOracles(\\n                registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb87e12d12ae5b6d4c52bdcc42819a73f9180333ccf1f85729156aa6e7f489efd\"}},\"version\":1}",
  "bytecode": "0x608060405262000018336001600160e01b036200007116565b6200002b6001600160e01b036200008416565b6001600160a01b031660006001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a362000098565b6000805160206200419483398151915255565b600080516020620041948339815191525490565b6140ec80620000a86000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063790fcf9f11610104578063ad1728cb116100a2578063d9caed1211610071578063d9caed1214610640578063dbe55e5614610676578063de5f62681461067e578063f4e0d9ac14610686576101cf565b8063ad1728cb146105ed578063c7af3352146105f5578063cd3b0212146105fd578063d38bfff41461061a576101cf565b80639136616a116100de5780639136616a1461046f5780639a6acf201461048c578063a43481d5146104b2578063aa388af6146105b3576101cf565b8063790fcf9f146103805780637b1039991461045f578063853828b614610467576101cf565b8063430bf08a116101715780635653b4141161014b5780635653b414146103125780635d36b1901461032c5780635f515226146103345780637884e7c61461035a576101cf565b8063430bf08a146102b857806347e7ef24146102c05780634d3df2c6146102ec576101cf565b80630fc3b4c4116101ad5780630fc3b4c4146102305780631072cbea14610256578063125f9e33146102825780632a8188791461028a576101cf565b80630242241d146101d45780630c340a24146101de5780630ed57b3a14610202575b600080fd5b6101dc6106ac565b005b6101e6610ca8565b604080516001600160a01b039092168252519081900360200190f35b6101dc6004803603604081101561021857600080fd5b506001600160a01b0381358116916020013516610cb7565b6101e66004803603602081101561024657600080fd5b50356001600160a01b0316610d0c565b6101dc6004803603604081101561026c57600080fd5b506001600160a01b038135169060200135610d27565b6101e6610d90565b6101dc600480360360408110156102a057600080fd5b506001600160a01b0381358116916020013516610d9f565b6101e6610ff3565b6101dc600480360360408110156102d657600080fd5b506001600160a01b038135169060200135611002565b6101dc6004803603602081101561030257600080fd5b50356001600160a01b03166110ca565b61031a611133565b60408051918252519081900360200190f35b6101dc611139565b61031a6004803603602081101561034a57600080fd5b50356001600160a01b031661119b565b6101dc6004803603602081101561037057600080fd5b50356001600160a01b0316611355565b6101dc600480360360a081101561039657600080fd5b6001600160a01b0382358116926020810135821692604082013590921691810190608081016060820135600160201b8111156103d157600080fd5b8201836020820111156103e357600080fd5b803590602001918460208302840111600160201b8311171561040457600080fd5b919390929091602081019035600160201b81111561042157600080fd5b82018360208201111561043357600080fd5b803590602001918460208302840111600160201b8311171561045457600080fd5b5090925090506113c6565b6101e6611526565b6101dc61152c565b6101dc6004803603602081101561048557600080fd5b5035611813565b6101dc600480360360208110156104a257600080fd5b50356001600160a01b03166119de565b6101dc60048036036101208110156104c957600080fd5b6001600160a01b0382358116926020810135821692604082013590921691810190608081016060820135600160201b81111561050457600080fd5b82018360208201111561051657600080fd5b803590602001918460208302840111600160201b8311171561053757600080fd5b919390929091602081019035600160201b81111561055457600080fd5b82018360208201111561056657600080fd5b803590602001918460208302840111600160201b8311171561058757600080fd5b91935091506001600160a01b038135811691602081013582169160408201358116916060013516611a47565b6105d9600480360360208110156105c957600080fd5b50356001600160a01b0316612052565b604080519115158252519081900360200190f35b6101dc612072565b6105d961218c565b6101dc6004803603602081101561061357600080fd5b50356121af565b6101dc6004803603602081101561063057600080fd5b50356001600160a01b03166121fb565b6101dc6004803603606081101561065657600080fd5b506001600160a01b03813581169160208101359091169060400135612295565b6101e6612568565b6101dc612577565b6101dc6004803603602081101561069c57600080fd5b50356001600160a01b03166126ff565b6034546001600160a01b03163314610705576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f308339815191528054600281141561075d576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255603a5460408051631e8c5c8960e11b815290516001600160a01b03909216918291633d18b91291600480830192600092919082900301818387803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050603c546001600160a01b0316158015925090506108505750603c54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d602081101561084b57600080fd5b505114155b15610bb857603c546039546001600160a01b03918216916108829183916201000090910416600063ffffffff61276816565b6039546108aa906001600160a01b03838116916201000090041660001963ffffffff61276816565b604080516003808252608082019092526060916020820183803883395050603c5482519293506001600160a01b0316918391506000906108e657fe5b6001600160a01b03928316602091820292909201810191909152603454604080516360cd0ddf60e11b81529051919093169263c19a1bbe926004808301939192829003018186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d602081101561096457600080fd5b505181518290600190811061097557fe5b6001600160a01b0392831660209182029290920101526037548251911690829060029081106109a057fe5b6001600160a01b03928316602091820292909201810191909152603954604080516370a0823160e01b81523060048201529051620100009092048416936338ed173993908716926370a08231926024808201939291829003018186803b158015610a0957600080fd5b505afa158015610a1d573d6000803e3d6000fd5b505050506040513d6020811015610a3357600080fd5b505160008430610a4b4261070863ffffffff61288016565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610ac4578181015183820152602001610aac565b505050509050019650505050505050600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b2a57600080fd5b8101908080516040519392919084600160201b821115610b4957600080fd5b908301906020820185811115610b5e57600080fd5b82518660208202830111600160201b82111715610b7a57600080fd5b82525081516020918201928201910280838360005b83811015610ba7578181015183820152602001610b8f565b505050509050016040525050505050505b603754604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d6020811015610c3257600080fd5b5051603454604080516001600160a01b0390921682526020820183905280519293507f9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e5205892918290030190a1603454610c9d906001600160a01b0384811691168363ffffffff6128e316565b505050600182555050565b6000610cb2612935565b905090565b610cbf61218c565b610cfe576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b610d08828261295a565b5050565b6035602052600090815260409020546001600160a01b031681565b610d2f61218c565b610d6e576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b610d08610d79610ca8565b6001600160a01b038416908363ffffffff6128e316565b6037546001600160a01b031681565b610da761218c565b610de6576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b6039546000906201000090046001600160a01b03166396ed28f9610e0985612ac9565b610e1285612ac9565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b158015610e7157600080fd5b505afa158015610e85573d6000803e3d6000fd5b505050506040513d6020811015610e9b57600080fd5b5051603a546040805163095ea7b360e01b81526001600160a01b03928316600482015260006024820181905291519394509184169263095ea7b3926044808201936020939283900390910190829087803b158015610ef857600080fd5b505af1158015610f0c573d6000803e3d6000fd5b505050506040513d6020811015610f2257600080fd5b5050603a546040805163095ea7b360e01b81526001600160a01b039283166004820152600019602482015290519183169163095ea7b3916044808201926020929091908290030181600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b505050506040513d6020811015610fa557600080fd5b50506001600160a01b039283166000818152603d602052604080822080549587166001600160a01b0319968716811790915582529020805484169091179055603b8054919093169116179055565b6034546001600160a01b031681565b6034546001600160a01b0316331461105b576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f30833981519152805460028114156110b3576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556110c18484612b30565b50600190555050565b6110d261218c565b611111576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603c80546001600160a01b0319166001600160a01b0392909216919091179055565b60385481565b611141612c79565b6001600160a01b0316336001600160a01b0316146111905760405162461bcd60e51b81526004018080602001828103825260308152602001806140886030913960400191505060405180910390fd5b61119933612c9e565b565b6000806111a783612ac9565b604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051603a549092506001600160a01b03161561134f57603a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b5051603b54604080516370a0823160e01b81523060048201529051929350611333926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d602081101561132457600080fd5b5051829063ffffffff61288016565b50801561134d5760006113468583612d4c565b9390930192505b505b50919050565b61135d61218c565b61139c576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603980546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6113ce61218c565b61140d576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600054610100900460ff16806114265750611426612f0c565b80611434575060005460ff16155b61146f5760405162461bcd60e51b815260040180806020018281038252602e815260200180613ffa602e913960400191505060405180910390fd5b600054610100900460ff1615801561149a576000805460ff1961ff0019909116610100171660011790555b61150a88888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250612f1292505050565b801561151c576000805461ff00191690555b5050505050505050565b61ce1081565b6034546001600160a01b031633148061155d5750611548610ca8565b6001600160a01b0316336001600160a01b0316145b6115985760405162461bcd60e51b8152600401808060200182810382526023815260200180613f0d6023913960400191505060405180910390fd5b600080516020613f30833981519152805460028114156115f0576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560005b60365481101561180b57603a546001600160a01b0316156116445761161a612fe9565b6116446036828154811061162a57fe5b6000918252602090912001546001600160a01b03166130cf565b60006116706036838154811061165657fe5b6000918252602090912001546001600160a01b0316612ac9565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d60208110156116e657600080fd5b50519050801561180157816001600160a01b031663db006a75826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561173657600080fd5b505af115801561174a573d6000803e3d6000fd5b5050505060006036848154811061175d57fe5b60009182526020918290200154603454604080516370a0823160e01b815230600482015290516001600160a01b0393841695506117ff94929093169285926370a082319260248082019391829003018186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d60208110156117e657600080fd5b50516001600160a01b038416919063ffffffff6128e316565b505b50506001016115f7565b505060019055565b61181b61218c565b61185a576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b60365481106118a0576040805162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015290519081900360640190fd5b6000603682815481106118af57fe5b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169060001901831015611952576036805460001981019081106118fd57fe5b600091825260209091200154603680546001600160a01b03909216918590811061192357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061195d57fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260358552604092839020805490941690935581519085168152905191927f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c92918290030190a2505050565b6119e661218c565b611a25576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603780546001600160a01b0319166001600160a01b0392909216919091179055565b611a4f61218c565b611a8e576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600054610100900460ff1680611aa75750611aa7612f0c565b80611ab5575060005460ff16155b611af05760405162461bcd60e51b815260040180806020018281038252602e815260200180613ffa602e913960400191505060405180910390fd5b600054610100900460ff16158015611b1b576000805460ff1961ff0019909116610100171660011790555b611b9c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612f1292505050565b603460009054906101000a90046001600160a01b03166001600160a01b031663128a8b056040518163ffffffff1660e01b815260040160206040518083038186803b158015611bea57600080fd5b505afa158015611bfe573d6000803e3d6000fd5b505050506040513d6020811015611c1457600080fd5b50516039805462010000600160b01b031916620100006001600160a01b0393841681029190911761ffff191691829055603a80546001600160a01b03199081168a861617909155603c80549091168685161790559004166396ed28f9611c7986612ac9565b611c8286612ac9565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b158015611ce157600080fd5b505afa158015611cf5573d6000803e3d6000fd5b505050506040513d6020811015611d0b57600080fd5b5051603b80546001600160a01b0319166001600160a01b039283161790819055603a546040805163095ea7b360e01b815291841660048301526000602483018190529051929093169263095ea7b3926044808401936020939083900390910190829087803b158015611d7c57600080fd5b505af1158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b5050603b54603a546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611e0257600080fd5b505af1158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b5050603b546039546040805163095ea7b360e01b8152620100009092046001600160a01b039081166004840152600060248401819052915193169263095ea7b3926044808201936020939283900390910190829087803b158015611e8f57600080fd5b505af1158015611ea3573d6000803e3d6000fd5b505050506040513d6020811015611eb957600080fd5b5050603b546039546040805163095ea7b360e01b8152620100009092046001600160a01b0390811660048401526000196024840152905192169163095ea7b3916044808201926020929091908290030181600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b505050506040513d6020811015611f4557600080fd5b50600090505b86811015611ff557878782818110611f5f57fe5b6039546040805163095ea7b360e01b8152620100009092046001600160a01b0390811660048401526000196024840152905160209384029590950135169363095ea7b39350604480830193928290030181600087803b158015611fc157600080fd5b505af1158015611fd5573d6000803e3d6000fd5b505050506040513d6020811015611feb57600080fd5b5050600101611f4b565b506001600160a01b038085166000818152603d602052604080822080549488166001600160a01b031995861681179091558252902080549092161790558015612044576000805461ff00191690555b505050505050505050505050565b6001600160a01b0390811660009081526035602052604090205416151590565b61207a61218c565b6120b9576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612111576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556036546000612122613266565b905060005b82811015610c9d5760006036828154811061213e57fe5b60009182526020822001546001600160a01b03169150612167908290859063ffffffff61276816565b6121836001600160a01b0382168460001963ffffffff61276816565b50600101612127565b6000612196612935565b6001600160a01b0316336001600160a01b031614905090565b6121b761218c565b6121f6576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603855565b61220361218c565b612242576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b61224b81613340565b806001600160a01b031661225d612935565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146122ee576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612346576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556000831161239f576040805162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e67000000000000000000604482015290519081900360640190fd5b6001600160a01b0385166123f3576040805162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b604482015290519081900360640190fd5b60006123fe85612ac9565b603a549091506001600160a01b03161580159061248e5750604080516370a0823160e01b8152306004820152905185916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561245f57600080fd5b505afa158015612473573d6000803e3d6000fd5b505050506040513d602081101561248957600080fd5b505111155b156124a45761249b612fe9565b6124a4856130cf565b604080516001600160a01b038381168252602082018790528251908816927f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398928290030190a2806001600160a01b031663db006a75856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561253057600080fd5b505af1158015612544573d6000803e3d6000fd5b5061255d925050506001600160a01b03861687866128e3565b505060019055505050565b6033546001600160a01b031681565b6034546001600160a01b031633146125d0576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612628576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560005b60365481101561180b5760006036828154811061264857fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d60208110156126c157600080fd5b5051905080156126f6576126f6603683815481106126db57fe5b6000918252602090912001546001600160a01b031682612b30565b5060010161262f565b61270761218c565b612746576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b8015806127ee575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156127c057600080fd5b505afa1580156127d4573d6000803e3d6000fd5b505050506040513d60208110156127ea57600080fd5b5051155b6128295760405162461bcd60e51b81526004018080602001828103825260368152602001806140526036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261287b908490613364565b505050565b6000828201838110156128da576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261287b908490613364565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6001600160a01b0382811660009081526035602052604090205416156129bc576040805162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b6001600160a01b038216158015906129dc57506001600160a01b03811615155b612a21576040805162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015290519081900360640190fd5b6001600160a01b03808316600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8909301805490951684179094558351918252925191927fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e76592918290030190a2610d088282613522565b6001600160a01b03808216600090815260356020526040812054909116806128dd576040805162461bcd60e51b815260206004820152601560248201527418551bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008111612b7e576040805162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015290519081900360640190fd5b6000612b8983612ac9565b604080516001600160a01b0380841682526020820186905282519394508616927f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62929181900390910190a2612bdc613565565b60395460408051636968703360e11b81526001600160a01b0387811660048301526024820187905261ffff90931660448201529051929091169163d2d0e0669160648082019260009290919082900301818387803b158015612c3d57600080fd5b505af1158015612c51573d6000803e3d6000fd5b5050603a546001600160a01b031615915061287b905057612c718361363f565b61287b613c8d565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116612cf9576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b0316612d0b612935565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612d4981613d74565b50565b6001600160a01b038281166000908152603d6020526040812054909116612da45760405162461bcd60e51b8152600401808060200182810382526028815260200180613f706028913960400191505060405180910390fd5b81612de05760405162461bcd60e51b8152600401808060200182810382526041815260200180613fb96041913960600191505060405180910390fd5b6001600160a01b03808416600090815260356020908152604080832054603b5482516370a0823160e01b81529086166004820152915194169384926370a082319260248082019391829003018186803b158015612e3c57600080fd5b505afa158015612e50573d6000803e3d6000fd5b505050506040513d6020811015612e6657600080fd5b5051603b54604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015612eb357600080fd5b505afa158015612ec7573d6000803e3d6000fd5b505050506040513d6020811015612edd57600080fd5b505190508015612f035780612ef8868463ffffffff613d9816565b81612eff57fe5b0493505b50505092915050565b303b1590565b603380546001600160a01b038088166001600160a01b031992831617909255603480548784169083161790556037805492861692909116919091179055815181518114612f9d576040805162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015290519081900360640190fd5b60005b81811015612fe057612fd8848281518110612fb757fe5b6020026020010151848381518110612fcb57fe5b602002602001015161295a565b600101612fa0565b50505050505050565b603a54604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b15801561303957600080fd5b505afa15801561304d573d6000803e3d6000fd5b505050506040513d602081101561306357600080fd5b505190508015610d0857816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156130b357600080fd5b505af11580156130c7573d6000803e3d6000fd5b505050505050565b6001600160a01b038082166000908152603d6020526040812054603b549083169216906130fb84612ac9565b9050600061310884612ac9565b603954604080516370a0823160e01b815230600482015290519293506001600160a01b03620100009092048216926000928716916370a08231916024808301926020929190829003018186803b15801561316157600080fd5b505afa158015613175573d6000803e3d6000fd5b505050506040513d602081101561318b57600080fd5b505190508015612fe0576001600160a01b03821663baa2abde858584600080306131bd4261070863ffffffff61288016565b604080516001600160e01b031960e08b901b1681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915290931660a483015260c4820192909252815160e480830193928290030181600087803b15801561323157600080fd5b505af1158015613245573d6000803e3d6000fd5b505050506040513d604081101561325b57600080fd5b505050505050505050565b600080603360009054906101000a90046001600160a01b03166001600160a01b031663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b757600080fd5b505afa1580156132cb573d6000803e3d6000fd5b505050506040513d60208110156132e157600080fd5b505190506001600160a01b038116610cb2576040805162461bcd60e51b815260206004820181905260248201527f4c656e64696e6720706f6f6c20636f726520646f6573206e6f74206578697374604482015290519081900360640190fd5b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b613376826001600160a01b0316613df1565b6133c7576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106134055780518252601f1990920191602091820191016133e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613467576040519150601f19603f3d011682016040523d82523d6000602084013e61346c565b606091505b5091509150816134c3576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561351c578080602001905160208110156134df57600080fd5b505161351c5760405162461bcd60e51b815260040180806020018281038252602a815260200180614028602a913960400191505060405180910390fd5b50505050565b600061352c613266565b90506135496001600160a01b03841682600063ffffffff61276816565b61287b6001600160a01b0384168260001963ffffffff61276816565b600080603360009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135b657600080fd5b505afa1580156135ca573d6000803e3d6000fd5b505050506040513d60208110156135e057600080fd5b505190506001600160a01b038116610cb2576040805162461bcd60e51b815260206004820152601b60248201527f4c656e64696e6720706f6f6c20646f6573206e6f742065786973740000000000604482015290519081900360640190fd5b6001600160a01b038082166000908152603d60209081526040808320546034548251635c4443cf60e11b8152925191861695169392849263b888879e9260048083019392829003018186803b15801561369757600080fd5b505afa1580156136ab573d6000803e3d6000fd5b505050506040513d60208110156136c157600080fd5b5051604080516315d5220f60e31b81526001600160a01b03878116600483015291519293506000929184169163aea9107891602480820192602092909190829003018186803b15801561371357600080fd5b505afa158015613727573d6000803e3d6000fd5b505050506040513d602081101561373d57600080fd5b5051604080516315d5220f60e31b81526001600160a01b03878116600483015291519293506000929185169163aea9107891602480820192602092909190829003018186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d60208110156137b957600080fd5b5051905060006137e7826137db85670de0b6b3a764000063ffffffff613d9816565b9063ffffffff613e2d16565b90506000613807846137db85670de0b6b3a764000063ffffffff613d9816565b9050600061381489612ac9565b9050600061382189612ac9565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561386d57600080fd5b505afa158015613881573d6000803e3d6000fd5b505050506040513d602081101561389757600080fd5b505114806139185750604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b1580156138ea57600080fd5b505afa1580156138fe573d6000803e3d6000fd5b505050506040513d602081101561391457600080fd5b5051145b1561392b57505050505050505050612d49565b604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b15801561397557600080fd5b505afa158015613989573d6000803e3d6000fd5b505050506040513d602081101561399f57600080fd5b5051604080516370a0823160e01b81523060048201529051919250600091613a3991670de0b6b3a7640000916137db918a916001600160a01b038a16916370a08231916024808301926020929190829003018186803b158015613a0157600080fd5b505afa158015613a15573d6000803e3d6000fd5b505050506040513d6020811015613a2b57600080fd5b50519063ffffffff613d9816565b604080516370a0823160e01b8152306004820152905191925082916001600160a01b038616916370a08231916024808301926020929190829003018186803b158015613a8457600080fd5b505afa158015613a98573d6000803e3d6000fd5b505050506040513d6020811015613aae57600080fd5b50511015613b8957604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b158015613afc57600080fd5b505afa158015613b10573d6000803e3d6000fd5b505050506040513d6020811015613b2657600080fd5b5051604080516370a0823160e01b81523060048201529051919250613b8691670de0b6b3a7640000916137db9189916001600160a01b038916916370a0823191602480820192602092909190829003018186803b158015613a0157600080fd5b91505b6039546201000090046001600160a01b03168063e8e337008686868660008030613bb542610708612880565b6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b158015613c5257600080fd5b505af1158015613c66573d6000803e3d6000fd5b505050506040513d6060811015613c7c57600080fd5b505050505050505050505050505050565b603b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613cd857600080fd5b505afa158015613cec573d6000803e3d6000fd5b505050506040513d6020811015613d0257600080fd5b505190508015612d4957603a546040805163534a7e1d60e11b81526004810184905290516001600160a01b039092169163a694fc3a9160248082019260009290919082900301818387803b158015613d5957600080fd5b505af1158015613d6d573d6000803e3d6000fd5b5050505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b600082613da7575060006128dd565b82820282848281613db457fe5b04146128da5760405162461bcd60e51b8152600401808060200182810382526021815260200180613f986021913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613e2557508115155b949350505050565b60006128da83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183613ef65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ebb578181015183820152602001613ea3565b50505050905090810190601f168015613ee85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581613f0257fe5b049594505050505056fe43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726e6f7253bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453543616c6c6572206973206e6f742074686520476f7665726e6f720000000000004161766553747261746567793a20417373657473206e6f742070617274206f66204c502050616972536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774161766553747261746567793a3a5f636865636b4c5042616c616e63653a206c69717569646974792073686f756c642062652067726561746572207468616e2030436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158204b800af2aed041df5986e6fd9178d18f4bd7ea3058b635a3085be0018aa27b0164736f6c634300050b00327bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063790fcf9f11610104578063ad1728cb116100a2578063d9caed1211610071578063d9caed1214610640578063dbe55e5614610676578063de5f62681461067e578063f4e0d9ac14610686576101cf565b8063ad1728cb146105ed578063c7af3352146105f5578063cd3b0212146105fd578063d38bfff41461061a576101cf565b80639136616a116100de5780639136616a1461046f5780639a6acf201461048c578063a43481d5146104b2578063aa388af6146105b3576101cf565b8063790fcf9f146103805780637b1039991461045f578063853828b614610467576101cf565b8063430bf08a116101715780635653b4141161014b5780635653b414146103125780635d36b1901461032c5780635f515226146103345780637884e7c61461035a576101cf565b8063430bf08a146102b857806347e7ef24146102c05780634d3df2c6146102ec576101cf565b80630fc3b4c4116101ad5780630fc3b4c4146102305780631072cbea14610256578063125f9e33146102825780632a8188791461028a576101cf565b80630242241d146101d45780630c340a24146101de5780630ed57b3a14610202575b600080fd5b6101dc6106ac565b005b6101e6610ca8565b604080516001600160a01b039092168252519081900360200190f35b6101dc6004803603604081101561021857600080fd5b506001600160a01b0381358116916020013516610cb7565b6101e66004803603602081101561024657600080fd5b50356001600160a01b0316610d0c565b6101dc6004803603604081101561026c57600080fd5b506001600160a01b038135169060200135610d27565b6101e6610d90565b6101dc600480360360408110156102a057600080fd5b506001600160a01b0381358116916020013516610d9f565b6101e6610ff3565b6101dc600480360360408110156102d657600080fd5b506001600160a01b038135169060200135611002565b6101dc6004803603602081101561030257600080fd5b50356001600160a01b03166110ca565b61031a611133565b60408051918252519081900360200190f35b6101dc611139565b61031a6004803603602081101561034a57600080fd5b50356001600160a01b031661119b565b6101dc6004803603602081101561037057600080fd5b50356001600160a01b0316611355565b6101dc600480360360a081101561039657600080fd5b6001600160a01b0382358116926020810135821692604082013590921691810190608081016060820135600160201b8111156103d157600080fd5b8201836020820111156103e357600080fd5b803590602001918460208302840111600160201b8311171561040457600080fd5b919390929091602081019035600160201b81111561042157600080fd5b82018360208201111561043357600080fd5b803590602001918460208302840111600160201b8311171561045457600080fd5b5090925090506113c6565b6101e6611526565b6101dc61152c565b6101dc6004803603602081101561048557600080fd5b5035611813565b6101dc600480360360208110156104a257600080fd5b50356001600160a01b03166119de565b6101dc60048036036101208110156104c957600080fd5b6001600160a01b0382358116926020810135821692604082013590921691810190608081016060820135600160201b81111561050457600080fd5b82018360208201111561051657600080fd5b803590602001918460208302840111600160201b8311171561053757600080fd5b919390929091602081019035600160201b81111561055457600080fd5b82018360208201111561056657600080fd5b803590602001918460208302840111600160201b8311171561058757600080fd5b91935091506001600160a01b038135811691602081013582169160408201358116916060013516611a47565b6105d9600480360360208110156105c957600080fd5b50356001600160a01b0316612052565b604080519115158252519081900360200190f35b6101dc612072565b6105d961218c565b6101dc6004803603602081101561061357600080fd5b50356121af565b6101dc6004803603602081101561063057600080fd5b50356001600160a01b03166121fb565b6101dc6004803603606081101561065657600080fd5b506001600160a01b03813581169160208101359091169060400135612295565b6101e6612568565b6101dc612577565b6101dc6004803603602081101561069c57600080fd5b50356001600160a01b03166126ff565b6034546001600160a01b03163314610705576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f308339815191528054600281141561075d576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b60028255603a5460408051631e8c5c8960e11b815290516001600160a01b03909216918291633d18b91291600480830192600092919082900301818387803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b5050603c546001600160a01b0316158015925090506108505750603c54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d602081101561084b57600080fd5b505114155b15610bb857603c546039546001600160a01b03918216916108829183916201000090910416600063ffffffff61276816565b6039546108aa906001600160a01b03838116916201000090041660001963ffffffff61276816565b604080516003808252608082019092526060916020820183803883395050603c5482519293506001600160a01b0316918391506000906108e657fe5b6001600160a01b03928316602091820292909201810191909152603454604080516360cd0ddf60e11b81529051919093169263c19a1bbe926004808301939192829003018186803b15801561093a57600080fd5b505afa15801561094e573d6000803e3d6000fd5b505050506040513d602081101561096457600080fd5b505181518290600190811061097557fe5b6001600160a01b0392831660209182029290920101526037548251911690829060029081106109a057fe5b6001600160a01b03928316602091820292909201810191909152603954604080516370a0823160e01b81523060048201529051620100009092048416936338ed173993908716926370a08231926024808201939291829003018186803b158015610a0957600080fd5b505afa158015610a1d573d6000803e3d6000fd5b505050506040513d6020811015610a3357600080fd5b505160008430610a4b4261070863ffffffff61288016565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610ac4578181015183820152602001610aac565b505050509050019650505050505050600060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b2a57600080fd5b8101908080516040519392919084600160201b821115610b4957600080fd5b908301906020820185811115610b5e57600080fd5b82518660208202830111600160201b82111715610b7a57600080fd5b82525081516020918201928201910280838360005b83811015610ba7578181015183820152602001610b8f565b505050509050016040525050505050505b603754604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d6020811015610c3257600080fd5b5051603454604080516001600160a01b0390921682526020820183905280519293507f9b15fe06f6132479e0c4d9dfbbff1de507a47663a459b2cc4ba1aa5a55e5205892918290030190a1603454610c9d906001600160a01b0384811691168363ffffffff6128e316565b505050600182555050565b6000610cb2612935565b905090565b610cbf61218c565b610cfe576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b610d08828261295a565b5050565b6035602052600090815260409020546001600160a01b031681565b610d2f61218c565b610d6e576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b610d08610d79610ca8565b6001600160a01b038416908363ffffffff6128e316565b6037546001600160a01b031681565b610da761218c565b610de6576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b6039546000906201000090046001600160a01b03166396ed28f9610e0985612ac9565b610e1285612ac9565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b158015610e7157600080fd5b505afa158015610e85573d6000803e3d6000fd5b505050506040513d6020811015610e9b57600080fd5b5051603a546040805163095ea7b360e01b81526001600160a01b03928316600482015260006024820181905291519394509184169263095ea7b3926044808201936020939283900390910190829087803b158015610ef857600080fd5b505af1158015610f0c573d6000803e3d6000fd5b505050506040513d6020811015610f2257600080fd5b5050603a546040805163095ea7b360e01b81526001600160a01b039283166004820152600019602482015290519183169163095ea7b3916044808201926020929091908290030181600087803b158015610f7b57600080fd5b505af1158015610f8f573d6000803e3d6000fd5b505050506040513d6020811015610fa557600080fd5b50506001600160a01b039283166000818152603d602052604080822080549587166001600160a01b0319968716811790915582529020805484169091179055603b8054919093169116179055565b6034546001600160a01b031681565b6034546001600160a01b0316331461105b576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f30833981519152805460028114156110b3576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556110c18484612b30565b50600190555050565b6110d261218c565b611111576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603c80546001600160a01b0319166001600160a01b0392909216919091179055565b60385481565b611141612c79565b6001600160a01b0316336001600160a01b0316146111905760405162461bcd60e51b81526004018080602001828103825260308152602001806140886030913960400191505060405180910390fd5b61119933612c9e565b565b6000806111a783612ac9565b604080516370a0823160e01b815230600482015290519192506001600160a01b038316916370a0823191602480820192602092909190829003018186803b1580156111f157600080fd5b505afa158015611205573d6000803e3d6000fd5b505050506040513d602081101561121b57600080fd5b5051603a549092506001600160a01b03161561134f57603a54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561127c57600080fd5b505afa158015611290573d6000803e3d6000fd5b505050506040513d60208110156112a657600080fd5b5051603b54604080516370a0823160e01b81523060048201529051929350611333926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156112fa57600080fd5b505afa15801561130e573d6000803e3d6000fd5b505050506040513d602081101561132457600080fd5b5051829063ffffffff61288016565b50801561134d5760006113468583612d4c565b9390930192505b505b50919050565b61135d61218c565b61139c576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603980546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b6113ce61218c565b61140d576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600054610100900460ff16806114265750611426612f0c565b80611434575060005460ff16155b61146f5760405162461bcd60e51b815260040180806020018281038252602e815260200180613ffa602e913960400191505060405180910390fd5b600054610100900460ff1615801561149a576000805460ff1961ff0019909116610100171660011790555b61150a88888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a918291850190849080828437600092019190915250612f1292505050565b801561151c576000805461ff00191690555b5050505050505050565b61ce1081565b6034546001600160a01b031633148061155d5750611548610ca8565b6001600160a01b0316336001600160a01b0316145b6115985760405162461bcd60e51b8152600401808060200182810382526023815260200180613f0d6023913960400191505060405180910390fd5b600080516020613f30833981519152805460028114156115f0576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560005b60365481101561180b57603a546001600160a01b0316156116445761161a612fe9565b6116446036828154811061162a57fe5b6000918252602090912001546001600160a01b03166130cf565b60006116706036838154811061165657fe5b6000918252602090912001546001600160a01b0316612ac9565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b1580156116bc57600080fd5b505afa1580156116d0573d6000803e3d6000fd5b505050506040513d60208110156116e657600080fd5b50519050801561180157816001600160a01b031663db006a75826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561173657600080fd5b505af115801561174a573d6000803e3d6000fd5b5050505060006036848154811061175d57fe5b60009182526020918290200154603454604080516370a0823160e01b815230600482015290516001600160a01b0393841695506117ff94929093169285926370a082319260248082019391829003018186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d60208110156117e657600080fd5b50516001600160a01b038416919063ffffffff6128e316565b505b50506001016115f7565b505060019055565b61181b61218c565b61185a576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b60365481106118a0576040805162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b604482015290519081900360640190fd5b6000603682815481106118af57fe5b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169060001901831015611952576036805460001981019081106118fd57fe5b600091825260209091200154603680546001600160a01b03909216918590811061192357fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061195d57fe5b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b0385811680835260358552604092839020805490941690935581519085168152905191927f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c92918290030190a2505050565b6119e661218c565b611a25576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603780546001600160a01b0319166001600160a01b0392909216919091179055565b611a4f61218c565b611a8e576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600054610100900460ff1680611aa75750611aa7612f0c565b80611ab5575060005460ff16155b611af05760405162461bcd60e51b815260040180806020018281038252602e815260200180613ffa602e913960400191505060405180910390fd5b600054610100900460ff16158015611b1b576000805460ff1961ff0019909116610100171660011790555b611b9c8c8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612f1292505050565b603460009054906101000a90046001600160a01b03166001600160a01b031663128a8b056040518163ffffffff1660e01b815260040160206040518083038186803b158015611bea57600080fd5b505afa158015611bfe573d6000803e3d6000fd5b505050506040513d6020811015611c1457600080fd5b50516039805462010000600160b01b031916620100006001600160a01b0393841681029190911761ffff191691829055603a80546001600160a01b03199081168a861617909155603c80549091168685161790559004166396ed28f9611c7986612ac9565b611c8286612ac9565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b03168152602001826001600160a01b03166001600160a01b031681526020019250505060206040518083038186803b158015611ce157600080fd5b505afa158015611cf5573d6000803e3d6000fd5b505050506040513d6020811015611d0b57600080fd5b5051603b80546001600160a01b0319166001600160a01b039283161790819055603a546040805163095ea7b360e01b815291841660048301526000602483018190529051929093169263095ea7b3926044808401936020939083900390910190829087803b158015611d7c57600080fd5b505af1158015611d90573d6000803e3d6000fd5b505050506040513d6020811015611da657600080fd5b5050603b54603a546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611e0257600080fd5b505af1158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b5050603b546039546040805163095ea7b360e01b8152620100009092046001600160a01b039081166004840152600060248401819052915193169263095ea7b3926044808201936020939283900390910190829087803b158015611e8f57600080fd5b505af1158015611ea3573d6000803e3d6000fd5b505050506040513d6020811015611eb957600080fd5b5050603b546039546040805163095ea7b360e01b8152620100009092046001600160a01b0390811660048401526000196024840152905192169163095ea7b3916044808201926020929091908290030181600087803b158015611f1b57600080fd5b505af1158015611f2f573d6000803e3d6000fd5b505050506040513d6020811015611f4557600080fd5b50600090505b86811015611ff557878782818110611f5f57fe5b6039546040805163095ea7b360e01b8152620100009092046001600160a01b0390811660048401526000196024840152905160209384029590950135169363095ea7b39350604480830193928290030181600087803b158015611fc157600080fd5b505af1158015611fd5573d6000803e3d6000fd5b505050506040513d6020811015611feb57600080fd5b5050600101611f4b565b506001600160a01b038085166000818152603d602052604080822080549488166001600160a01b031995861681179091558252902080549092161790558015612044576000805461ff00191690555b505050505050505050505050565b6001600160a01b0390811660009081526035602052604090205416151590565b61207a61218c565b6120b9576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612111576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556036546000612122613266565b905060005b82811015610c9d5760006036828154811061213e57fe5b60009182526020822001546001600160a01b03169150612167908290859063ffffffff61276816565b6121836001600160a01b0382168460001963ffffffff61276816565b50600101612127565b6000612196612935565b6001600160a01b0316336001600160a01b031614905090565b6121b761218c565b6121f6576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603855565b61220361218c565b612242576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b61224b81613340565b806001600160a01b031661225d612935565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146122ee576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612346576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b600282556000831161239f576040805162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e67000000000000000000604482015290519081900360640190fd5b6001600160a01b0385166123f3576040805162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b604482015290519081900360640190fd5b60006123fe85612ac9565b603a549091506001600160a01b03161580159061248e5750604080516370a0823160e01b8152306004820152905185916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561245f57600080fd5b505afa158015612473573d6000803e3d6000fd5b505050506040513d602081101561248957600080fd5b505111155b156124a45761249b612fe9565b6124a4856130cf565b604080516001600160a01b038381168252602082018790528251908816927f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398928290030190a2806001600160a01b031663db006a75856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561253057600080fd5b505af1158015612544573d6000803e3d6000fd5b5061255d925050506001600160a01b03861687866128e3565b505060019055505050565b6033546001600160a01b031681565b6034546001600160a01b031633146125d0576040805162461bcd60e51b815260206004820152601760248201527610d85b1b195c881a5cc81b9bdd081d1a194815985d5b1d604a1b604482015290519081900360640190fd5b600080516020613f3083398151915280546002811415612628576040805162461bcd60e51b815260206004820152600e60248201526d1499595b9d1c985b9d0818d85b1b60921b604482015290519081900360640190fd5b6002825560005b60365481101561180b5760006036828154811061264857fe5b60009182526020918290200154604080516370a0823160e01b815230600482015290516001600160a01b03909216926370a0823192602480840193829003018186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d60208110156126c157600080fd5b5051905080156126f6576126f6603683815481106126db57fe5b6000918252602090912001546001600160a01b031682612b30565b5060010161262f565b61270761218c565b612746576040805162461bcd60e51b815260206004820152601a6024820152600080516020613f50833981519152604482015290519081900360640190fd5b603a80546001600160a01b0319166001600160a01b0392909216919091179055565b8015806127ee575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b1580156127c057600080fd5b505afa1580156127d4573d6000803e3d6000fd5b505050506040513d60208110156127ea57600080fd5b5051155b6128295760405162461bcd60e51b81526004018080602001828103825260368152602001806140526036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261287b908490613364565b505050565b6000828201838110156128da576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261287b908490613364565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a5490565b6001600160a01b0382811660009081526035602052604090205416156129bc576040805162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b604482015290519081900360640190fd5b6001600160a01b038216158015906129dc57506001600160a01b03811615155b612a21576040805162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b604482015290519081900360640190fd5b6001600160a01b03808316600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b8909301805490951684179094558351918252925191927fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e76592918290030190a2610d088282613522565b6001600160a01b03808216600090815260356020526040812054909116806128dd576040805162461bcd60e51b815260206004820152601560248201527418551bdad95b88191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008111612b7e576040805162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b604482015290519081900360640190fd5b6000612b8983612ac9565b604080516001600160a01b0380841682526020820186905282519394508616927f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62929181900390910190a2612bdc613565565b60395460408051636968703360e11b81526001600160a01b0387811660048301526024820187905261ffff90931660448201529051929091169163d2d0e0669160648082019260009290919082900301818387803b158015612c3d57600080fd5b505af1158015612c51573d6000803e3d6000fd5b5050603a546001600160a01b031615915061287b905057612c718361363f565b61287b613c8d565b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db5490565b6001600160a01b038116612cf9576040805162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015290519081900360640190fd5b806001600160a01b0316612d0b612935565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3612d4981613d74565b50565b6001600160a01b038281166000908152603d6020526040812054909116612da45760405162461bcd60e51b8152600401808060200182810382526028815260200180613f706028913960400191505060405180910390fd5b81612de05760405162461bcd60e51b8152600401808060200182810382526041815260200180613fb96041913960600191505060405180910390fd5b6001600160a01b03808416600090815260356020908152604080832054603b5482516370a0823160e01b81529086166004820152915194169384926370a082319260248082019391829003018186803b158015612e3c57600080fd5b505afa158015612e50573d6000803e3d6000fd5b505050506040513d6020811015612e6657600080fd5b5051603b54604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015612eb357600080fd5b505afa158015612ec7573d6000803e3d6000fd5b505050506040513d6020811015612edd57600080fd5b505190508015612f035780612ef8868463ffffffff613d9816565b81612eff57fe5b0493505b50505092915050565b303b1590565b603380546001600160a01b038088166001600160a01b031992831617909255603480548784169083161790556037805492861692909116919091179055815181518114612f9d576040805162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b604482015290519081900360640190fd5b60005b81811015612fe057612fd8848281518110612fb757fe5b6020026020010151848381518110612fcb57fe5b602002602001015161295a565b600101612fa0565b50505050505050565b603a54604080516370a0823160e01b815230600482015290516001600160a01b039092169160009183916370a0823191602480820192602092909190829003018186803b15801561303957600080fd5b505afa15801561304d573d6000803e3d6000fd5b505050506040513d602081101561306357600080fd5b505190508015610d0857816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156130b357600080fd5b505af11580156130c7573d6000803e3d6000fd5b505050505050565b6001600160a01b038082166000908152603d6020526040812054603b549083169216906130fb84612ac9565b9050600061310884612ac9565b603954604080516370a0823160e01b815230600482015290519293506001600160a01b03620100009092048216926000928716916370a08231916024808301926020929190829003018186803b15801561316157600080fd5b505afa158015613175573d6000803e3d6000fd5b505050506040513d602081101561318b57600080fd5b505190508015612fe0576001600160a01b03821663baa2abde858584600080306131bd4261070863ffffffff61288016565b604080516001600160e01b031960e08b901b1681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915290931660a483015260c4820192909252815160e480830193928290030181600087803b15801561323157600080fd5b505af1158015613245573d6000803e3d6000fd5b505050506040513d604081101561325b57600080fd5b505050505050505050565b600080603360009054906101000a90046001600160a01b03166001600160a01b031663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b1580156132b757600080fd5b505afa1580156132cb573d6000803e3d6000fd5b505050506040513d60208110156132e157600080fd5b505190506001600160a01b038116610cb2576040805162461bcd60e51b815260206004820181905260248201527f4c656e64696e6720706f6f6c20636f726520646f6573206e6f74206578697374604482015290519081900360640190fd5b7f44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db55565b613376826001600160a01b0316613df1565b6133c7576040805162461bcd60e51b815260206004820152601f60248201527f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400604482015290519081900360640190fd5b60006060836001600160a01b0316836040518082805190602001908083835b602083106134055780518252601f1990920191602091820191016133e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114613467576040519150601f19603f3d011682016040523d82523d6000602084013e61346c565b606091505b5091509150816134c3576040805162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015290519081900360640190fd5b80511561351c578080602001905160208110156134df57600080fd5b505161351c5760405162461bcd60e51b815260040180806020018281038252602a815260200180614028602a913960400191505060405180910390fd5b50505050565b600061352c613266565b90506135496001600160a01b03841682600063ffffffff61276816565b61287b6001600160a01b0384168260001963ffffffff61276816565b600080603360009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156135b657600080fd5b505afa1580156135ca573d6000803e3d6000fd5b505050506040513d60208110156135e057600080fd5b505190506001600160a01b038116610cb2576040805162461bcd60e51b815260206004820152601b60248201527f4c656e64696e6720706f6f6c20646f6573206e6f742065786973740000000000604482015290519081900360640190fd5b6001600160a01b038082166000908152603d60209081526040808320546034548251635c4443cf60e11b8152925191861695169392849263b888879e9260048083019392829003018186803b15801561369757600080fd5b505afa1580156136ab573d6000803e3d6000fd5b505050506040513d60208110156136c157600080fd5b5051604080516315d5220f60e31b81526001600160a01b03878116600483015291519293506000929184169163aea9107891602480820192602092909190829003018186803b15801561371357600080fd5b505afa158015613727573d6000803e3d6000fd5b505050506040513d602081101561373d57600080fd5b5051604080516315d5220f60e31b81526001600160a01b03878116600483015291519293506000929185169163aea9107891602480820192602092909190829003018186803b15801561378f57600080fd5b505afa1580156137a3573d6000803e3d6000fd5b505050506040513d60208110156137b957600080fd5b5051905060006137e7826137db85670de0b6b3a764000063ffffffff613d9816565b9063ffffffff613e2d16565b90506000613807846137db85670de0b6b3a764000063ffffffff613d9816565b9050600061381489612ac9565b9050600061382189612ac9565b604080516370a0823160e01b815230600482015290519192506000916001600160a01b038516916370a08231916024808301926020929190829003018186803b15801561386d57600080fd5b505afa158015613881573d6000803e3d6000fd5b505050506040513d602081101561389757600080fd5b505114806139185750604080516370a0823160e01b815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b1580156138ea57600080fd5b505afa1580156138fe573d6000803e3d6000fd5b505050506040513d602081101561391457600080fd5b5051145b1561392b57505050505050505050612d49565b604080516370a0823160e01b815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b15801561397557600080fd5b505afa158015613989573d6000803e3d6000fd5b505050506040513d602081101561399f57600080fd5b5051604080516370a0823160e01b81523060048201529051919250600091613a3991670de0b6b3a7640000916137db918a916001600160a01b038a16916370a08231916024808301926020929190829003018186803b158015613a0157600080fd5b505afa158015613a15573d6000803e3d6000fd5b505050506040513d6020811015613a2b57600080fd5b50519063ffffffff613d9816565b604080516370a0823160e01b8152306004820152905191925082916001600160a01b038616916370a08231916024808301926020929190829003018186803b158015613a8457600080fd5b505afa158015613a98573d6000803e3d6000fd5b505050506040513d6020811015613aae57600080fd5b50511015613b8957604080516370a0823160e01b815230600482015290516001600160a01b038516916370a08231916024808301926020929190829003018186803b158015613afc57600080fd5b505afa158015613b10573d6000803e3d6000fd5b505050506040513d6020811015613b2657600080fd5b5051604080516370a0823160e01b81523060048201529051919250613b8691670de0b6b3a7640000916137db9189916001600160a01b038916916370a0823191602480820192602092909190829003018186803b158015613a0157600080fd5b91505b6039546201000090046001600160a01b03168063e8e337008686868660008030613bb542610708612880565b6040518963ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001886001600160a01b03166001600160a01b03168152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200182815260200198505050505050505050606060405180830381600087803b158015613c5257600080fd5b505af1158015613c66573d6000803e3d6000fd5b505050506040513d6060811015613c7c57600080fd5b505050505050505050505050505050565b603b54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613cd857600080fd5b505afa158015613cec573d6000803e3d6000fd5b505050506040513d6020811015613d0257600080fd5b505190508015612d4957603a546040805163534a7e1d60e11b81526004810184905290516001600160a01b039092169163a694fc3a9160248082019260009290919082900301818387803b158015613d5957600080fd5b505af1158015613d6d573d6000803e3d6000fd5b5050505050565b7f7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a55565b600082613da7575060006128dd565b82820282848281613db457fe5b04146128da5760405162461bcd60e51b8152600401808060200182810382526021815260200180613f986021913960400191505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590613e2557508115155b949350505050565b60006128da83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183613ef65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ebb578181015183820152602001613ea3565b50505050905090810190601f168015613ee85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581613f0257fe5b049594505050505056fe43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726e6f7253bf423e48ed90e97d02ab0ebab13b2a235a6bfbe9c321847d5c175333ac453543616c6c6572206973206e6f742074686520476f7665726e6f720000000000004161766553747261746567793a20417373657473206e6f742070617274206f66204c502050616972536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774161766553747261746567793a3a5f636865636b4c5042616c616e63653a206c69717569646974792073686f756c642062652067726561746572207468616e2030436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e63654f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f6d706c6574652074686520636c61696da265627a7a723158204b800af2aed041df5986e6fd9178d18f4bd7ea3058b635a3085be0018aa27b0164736f6c634300050b0032",
  "devdoc": {
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform",
        "params": {
          "_asset": "Address of the asset"
        },
        "return": "balance    Total value of the asset in the platform"
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardToken()": {
        "details": "Collect accumulated reward token and send to Vault. If there is a secondary reward token, swap it for primary reward token also"
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into Aave",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        },
        "return": "amountDeposited Amount of asset that was deposited"
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into Aave"
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address,address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "jGeneric platform address",
          "_rewardTokenAddress": "Address of reward token for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "initialize(address,address,address,address[],address[],address,address,address,address)": {
        "params": {
          "_assets": "Addresses of supported assets. MUST be passed in the same               order as returned by coins on the pool contract, i.e.               cUSD, cEUR.",
          "_liquidityToken1Address": "Address of native asset for first AToken for reward LP Pool, i.e cUSD",
          "_liquidityToken2Address": "Address of native asset for second AToken for reward LP Pool, i.e cEUR",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Address of the Aave/Moola lending pool",
          "_rewardTokenAddress": "Address of MOO",
          "_secondaryRewardTokenAddress": "Address of secondary reward token if any, else set this to 0x0",
          "_ubeStakingAddress": "Address of Ubeswap LP Tokens Staking contract",
          "_vaultAddress": "Address of the vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.     This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding aToken,     if for some reason is it necessary."
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.     This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setRewardLiquidationThreshold(uint256)": {
        "details": "Set the reward token liquidation threshold.",
        "params": {
          "_threshold": "Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls."
        }
      },
      "setRewardPoolAddress(address,address)": {
        "details": "Set the reward Uniswap Pool address Stable tokens for which corresponding ATokens pair exists"
      },
      "setRewardTokenAddress(address)": {
        "details": "Set the reward token address.",
        "params": {
          "_rewardTokenAddress": "Address of the reward token"
        }
      },
      "setSecondaryRewardTokenAddress(address)": {
        "details": "Set the secondary reward token address in case staking contract reward dual reward token"
      },
      "setStakingAddress(address)": {
        "details": "Set the staking contract address."
      },
      "setUniswapAddress(address)": {
        "details": "Set the UniswapV2 Router Address."
      },
      "supportsAsset(address)": {
        "details": "Retuns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in     strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from Aave",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        },
        "return": "amountWithdrawn Amount of asset that was withdrawn"
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send them to Vault contract."
      }
    }
  },
  "userdoc": {
    "methods": {
      "initialize(address,address,address,address[],address[],address,address,address,address)": {
        "notice": "Initializer for setting up strategy internal state. This overrides the InitializableAbstractStrategy initializer as Aave/Moola strategies don't fit well within that abstraction."
      }
    }
  }
}