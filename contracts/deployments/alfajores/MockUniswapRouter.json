{
  "address": "0x88efe587D728853807B5afdfaf5ea8f72B6A71F9",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "tok0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pairToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tok1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_tok0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tok1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf46280cc06c4bc4718b200ac31a97f1aa900c4f37199124eccff8a68c8636abb",
  "receipt": {
    "to": null,
    "from": "0x3084F0b94d41111526f8d1e5fFf43e1752907d48",
    "contractAddress": "0x88efe587D728853807B5afdfaf5ea8f72B6A71F9",
    "transactionIndex": 2,
    "gasUsed": "1056432",
    "logsBloom": "0x
    "blockHash": "0xeb7cf57f76ede0e9c1b67f78b6d84a9ce183aeca35e1bef39575a7e02312b385",
    "transactionHash": "0xf46280cc06c4bc4718b200ac31a97f1aa900c4f37199124eccff8a68c8636abb",
    "logs": [],
    "blockNumber": 6733056,
    "cumulativeGasUsed": "1431437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "19f61395f16c024a9cec84b97c17c7b9",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"tok0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tok1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tok0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tok1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockUniswapRouter.sol\":\"MockUniswapRouter\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0xb15af804e2bc97db51e4e103f13de9fe13f87e6b835d7a88c897966c0e58506e\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\ncontract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_burnFrom}.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9b94356691f3cbf90a5d83ae3fdf6a5a662bb004d2bd8b034160d60221807e64\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x01eab42b6d54fa5389598e0663c24680ecc017e2da848e8ea1c40aeaa8225eef\"},\"contracts/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xf722b9b3a04647d5a596b92dbc9aa6208aa999a51a4380197d2762be9591a436\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function factory() external pure returns (address);\\n\\n    function pairFor(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address);\\n}\\n\",\"keccak256\":\"0x2539886790093dc6528e792474f73d170f51d1dee8b44bc7d28552a5a483965c\"},\"contracts/mocks/MintableERC20.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IMintableERC20 {\\n    function mint(uint256 value) external returns (bool);\\n}\\n\\n/**\\n * @title ERC20Mintable\\n * @dev ERC20 minting logic\\n */\\ncontract MintableERC20 is IMintableERC20, ERC20 {\\n    /**\\n     * @dev Function to mint tokens\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(uint256 value) public returns (bool) {\\n        _mint(msg.sender, value);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8fed0d59792b4a1125a2f23d5053b1131ba21a40a6481fc168bac7dc302adbc5\"},\"contracts/mocks/MockUniswapRouter.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IUniswapV2Router } from \\\"../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { IMintableERC20 } from \\\"./MintableERC20.sol\\\";\\nimport { ERC20Burnable } from \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\ncontract MockUniswapRouter is IUniswapV2Router {\\n    using StableMath for uint256;\\n    using SafeMath for uint256;\\n\\n    address public pairToken;\\n    address public tok0;\\n    address public tok1;\\n\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    function initialize(\\n        address _tok0,\\n        address _tok1,\\n        address _pairToken\\n    ) public {\\n        (tok0, tok1) = sortTokens(_tok0, _tok1);\\n        pairToken = _pairToken;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts) {\\n        address _tok0 = path[0];\\n        address _tok1 = path[path.length - 1];\\n        uint256 amount = amountIn.scaleBy(\\n            int8(Helpers.getDecimals(_tok1) - Helpers.getDecimals(_tok0))\\n        );\\n\\n        IERC20(_tok0).transferFrom(msg.sender, address(this), amountIn);\\n        IMintableERC20(_tok1).mint(amount);\\n        IERC20(_tok1).transfer(to, amount);\\n\\n        // console.log(\\n        //     \\\"MockUniswapRouter::swapExactTokensForTokens: amount=%s, amountIn=%s\\\",\\n        //     amount,\\n        //     amountIn\\n        // );\\n\\n        amounts = new uint256[](2);\\n        amounts[0] = amount;\\n        amounts[1] = amount;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        (address _tok0, address _tok1) = sortTokens(tokenA, tokenB);\\n        require(_tok0 == tok0, \\\"MockUniswapV2Router: Different tokens\\\");\\n        require(_tok1 == tok1, \\\"MockUniswapV2Router: Different tokens\\\");\\n\\n        (amountA, amountB) = tokenA == tok0\\n            ? (amountADesired, amountBDesired)\\n            : (amountBDesired, amountADesired);\\n\\n        IERC20(tok0).transferFrom(msg.sender, pairToken, amountA);\\n        IERC20(tok1).transferFrom(msg.sender, pairToken, amountB);\\n\\n        liquidity = amountA.add(amountB);\\n        IMintableERC20(pairToken).mint(liquidity);\\n        IERC20(pairToken).transfer(to, liquidity);\\n\\n        // console.log(\\n        //     \\\"MockUniswapRouter::addLiquidity:  amountADesired=%s, amountBDesired=%s\\\",\\n        //     amountADesired,\\n        //     amountBDesired\\n        // );\\n    }\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB) {\\n        (address _tok0, address _tok1) = sortTokens(tokenA, tokenB);\\n        require(_tok0 == tok0, \\\"MockUniswapV2Router: Different tokens\\\");\\n        require(_tok1 == tok1, \\\"MockUniswapV2Router: Different tokens\\\");\\n\\n        uint256 _totalSupply = IERC20(pairToken).totalSupply();\\n        uint256 balance0 = IERC20(tok0).balanceOf(pairToken);\\n        uint256 balance1 = IERC20(tok1).balanceOf(pairToken);\\n\\n        IERC20(pairToken).transferFrom(msg.sender, address(this), liquidity);\\n        ERC20Burnable(pairToken).burn(liquidity);\\n\\n        amountA = liquidity.mul(balance0) / _totalSupply;\\n        amountB = liquidity.mul(balance1) / _totalSupply;\\n\\n        IERC20(tok0).transferFrom(pairToken, to, amountA);\\n        IERC20(tok1).transferFrom(pairToken, to, amountB);\\n    }\\n\\n    function factory() external pure returns (address) {\\n        return address(0);\\n    }\\n\\n    function pairFor(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return pairToken;\\n    }\\n}\\n\",\"keccak256\":\"0x5426a8b51e06b0cd8f267c001d20bffab0d1a0da9c5a162c6517d1dc391b581c\"},\"contracts/utils/Helpers.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xd2ca92e0af883dc1aec5b22caced274e59829e0e30a9e955dcc48b8d921f5cdc\"},\"contracts/utils/StableMath.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\\n     */\\n    function scaleBy(uint256 x, int8 adjustment)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (adjustment > 0) {\\n            x = x.mul(10**uint256(adjustment));\\n        } else if (adjustment < 0) {\\n            x = x.div(10**uint256(adjustment * -1));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e38 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0xa77fccf850feb6d54ba3a6530f92554caef8a67a1ceb573d4f8a5d1bf64ff9d2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611228806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806396ed28f91161006657806396ed28f9146101a7578063baa2abde146101d5578063c0c53b8b1461023e578063c45a015514610278578063e8e337001461028057610093565b80630d9038fa1461009857806338ed1739146100bc5780633de35b7914610197578063828220391461019f575b600080fd5b6100a06102f3565b604080516001600160a01b039092168252519081900360200190f35b610147600480360360a08110156100d257600080fd5b8135916020810135918101906060810160408201356401000000008111156100f957600080fd5b82018360208201111561010b57600080fd5b8035906020019184602083028401116401000000008311171561012d57600080fd5b91935091506001600160a01b038135169060200135610302565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561018357818101518382015260200161016b565b505050509050019250505060405180910390f35b6100a061054b565b6100a061055a565b6100a0600480360360408110156101bd57600080fd5b506001600160a01b0381358116916020013516610569565b610225600480360360e08110156101eb57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359091169060c0013561057c565b6040805192835260208301919091528051918290030190f35b6102766004803603606081101561025457600080fd5b506001600160a01b038135811691602081013582169160409091013516610a62565b005b6100a0610aae565b6102d5600480360361010081101561029757600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135610ab3565b60408051938452602084019290925282820152519081900360600190f35b6001546001600160a01b031681565b606060008585600081811061031357fe5b905060200201356001600160a01b03169050600086866001898990500381811061033957fe5b905060200201356001600160a01b03169050600061037161035984610dd4565b61036284610dd4565b8c91900363ffffffff610e8e16565b604080516323b872dd60e01b8152336004820152306024820152604481018d905290519192506001600160a01b038516916323b872dd916064808201926020929091908290030181600087803b1580156103ca57600080fd5b505af11580156103de573d6000803e3d6000fd5b505050506040513d60208110156103f457600080fd5b50506040805163140e25ad60e31b81526004810183905290516001600160a01b0384169163a0712d689160248083019260209291908290030181600087803b15801561043f57600080fd5b505af1158015610453573d6000803e3d6000fd5b505050506040513d602081101561046957600080fd5b50506040805163a9059cbb60e01b81526001600160a01b0388811660048301526024820184905291519184169163a9059cbb916044808201926020929091908290030181600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b50506040805160028082526060820183529091602083019080388339019050509350808460008151811061051857fe5b602002602001018181525050808460018151811061053257fe5b6020026020010181815250505050509695505050505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b6000546001600160a01b03165b92915050565b60008060008061058c8b8b610ee8565b60015491935091506001600160a01b038084169116146105dd5760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6002546001600160a01b038281169116146106295760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b505160015460008054604080516370a0823160e01b81526001600160a01b039283166004820152905194955091939216916370a0823191602480820192602092909190829003018186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d602081101561072357600080fd5b505160025460008054604080516370a0823160e01b81526001600160a01b039283166004820152905194955091939216916370a0823191602480820192602092909190829003018186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d60208110156107a457600080fd5b810190808051906020019092919050505090506000809054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d602081101561086f57600080fd5b8101908080519060200190929190505050506000809054906101000a90046001600160a01b03166001600160a01b03166342966c688d6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b5050505082610907838e610fc690919063ffffffff16565b8161090e57fe5b049650826109228d8363ffffffff610fc616565b8161092957fe5b60015460008054604080516323b872dd60e01b81526001600160a01b0392831660048201528f83166024820152604481018e90529051959094049a50909116926323b872dd926064808201936020939283900390910190829087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b505050506040513d60208110156109bb57600080fd5b505060025460008054604080516323b872dd60e01b81526001600160a01b0392831660048201528d83166024820152604481018b9052905191909316926323b872dd9260648083019360209390929083900390910190829087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050506040513d6020811015610a4c57600080fd5b50969e959d50949b505050505050505050505050565b610a6c8383610ee8565b600280546001600160a01b03199081166001600160a01b0393841617909155600180548216938316939093179092556000805490921692169190911790555050565b600090565b6000806000806000610ac58d8d610ee8565b60015491935091506001600160a01b03808416911614610b165760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6002546001600160a01b03828116911614610b625760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6001546001600160a01b038e8116911614610b7e57898b610b81565b8a8a5b60015460008054604080516323b872dd60e01b81523360048201526001600160a01b039283166024820152604481018790529051959a50939850909116926323b872dd926064808201936020939283900390910190829087803b158015610be757600080fd5b505af1158015610bfb573d6000803e3d6000fd5b505050506040513d6020811015610c1157600080fd5b505060025460008054604080516323b872dd60e01b81523360048201526001600160a01b03928316602482015260448101899052905191909316926323b872dd9260648083019360209390929083900390910190829087803b158015610c7657600080fd5b505af1158015610c8a573d6000803e3d6000fd5b505050506040513d6020811015610ca057600080fd5b50610cb39050858563ffffffff61102616565b92506000809054906101000a90046001600160a01b03166001600160a01b031663a0712d68846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610d0f57600080fd5b505af1158015610d23573d6000803e3d6000fd5b505050506040513d6020811015610d3957600080fd5b5050600080546040805163a9059cbb60e01b81526001600160a01b038b81166004830152602482018890529151919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610d9457600080fd5b505af1158015610da8573d6000803e3d6000fd5b505050506040513d6020811015610dbe57600080fd5b50949d939c50919a509198505050505050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d6020811015610e3a57600080fd5b505160ff16905060048110801590610e53575060128111155b6105765760405162461bcd60e51b81526004018080602001828103825260298152602001806111856029913960400191505060405180910390fd5b6000808260000b1315610eb957610eb283600084900b600a0a63ffffffff610fc616565b9250610ee1565b60008260000b1215610ee157610ede836000848103900b600a0a63ffffffff61108016565b92505b5090919050565b600080826001600160a01b0316846001600160a01b03161415610f3c5760405162461bcd60e51b81526004018080602001828103825260258152602001806111606025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610f5c578284610f5f565b83835b90925090506001600160a01b038216610fbf576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b600082610fd557506000610576565b82820282848281610fe257fe5b041461101f5760405162461bcd60e51b81526004018080602001828103825260218152602001806111d36021913960400191505060405180910390fd5b9392505050565b60008282018381101561101f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061101f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836111495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561110e5781810151838201526020016110f6565b50505050905090810190601f16801561113b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161115557fe5b049594505050505056fe556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c616365734d6f636b556e69737761705632526f757465723a20446966666572656e7420746f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820419dd7f485ad692a161402b27ae473770c954049f0db33888649f9d80e1eaee964736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806396ed28f91161006657806396ed28f9146101a7578063baa2abde146101d5578063c0c53b8b1461023e578063c45a015514610278578063e8e337001461028057610093565b80630d9038fa1461009857806338ed1739146100bc5780633de35b7914610197578063828220391461019f575b600080fd5b6100a06102f3565b604080516001600160a01b039092168252519081900360200190f35b610147600480360360a08110156100d257600080fd5b8135916020810135918101906060810160408201356401000000008111156100f957600080fd5b82018360208201111561010b57600080fd5b8035906020019184602083028401116401000000008311171561012d57600080fd5b91935091506001600160a01b038135169060200135610302565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561018357818101518382015260200161016b565b505050509050019250505060405180910390f35b6100a061054b565b6100a061055a565b6100a0600480360360408110156101bd57600080fd5b506001600160a01b0381358116916020013516610569565b610225600480360360e08110156101eb57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359091169060c0013561057c565b6040805192835260208301919091528051918290030190f35b6102766004803603606081101561025457600080fd5b506001600160a01b038135811691602081013582169160409091013516610a62565b005b6100a0610aae565b6102d5600480360361010081101561029757600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a08101359160c0820135169060e00135610ab3565b60408051938452602084019290925282820152519081900360600190f35b6001546001600160a01b031681565b606060008585600081811061031357fe5b905060200201356001600160a01b03169050600086866001898990500381811061033957fe5b905060200201356001600160a01b03169050600061037161035984610dd4565b61036284610dd4565b8c91900363ffffffff610e8e16565b604080516323b872dd60e01b8152336004820152306024820152604481018d905290519192506001600160a01b038516916323b872dd916064808201926020929091908290030181600087803b1580156103ca57600080fd5b505af11580156103de573d6000803e3d6000fd5b505050506040513d60208110156103f457600080fd5b50506040805163140e25ad60e31b81526004810183905290516001600160a01b0384169163a0712d689160248083019260209291908290030181600087803b15801561043f57600080fd5b505af1158015610453573d6000803e3d6000fd5b505050506040513d602081101561046957600080fd5b50506040805163a9059cbb60e01b81526001600160a01b0388811660048301526024820184905291519184169163a9059cbb916044808201926020929091908290030181600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b50506040805160028082526060820183529091602083019080388339019050509350808460008151811061051857fe5b602002602001018181525050808460018151811061053257fe5b6020026020010181815250505050509695505050505050565b6000546001600160a01b031681565b6002546001600160a01b031681565b6000546001600160a01b03165b92915050565b60008060008061058c8b8b610ee8565b60015491935091506001600160a01b038084169116146105dd5760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6002546001600160a01b038281169116146106295760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b505160015460008054604080516370a0823160e01b81526001600160a01b039283166004820152905194955091939216916370a0823191602480820192602092909190829003018186803b1580156106f957600080fd5b505afa15801561070d573d6000803e3d6000fd5b505050506040513d602081101561072357600080fd5b505160025460008054604080516370a0823160e01b81526001600160a01b039283166004820152905194955091939216916370a0823191602480820192602092909190829003018186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d60208110156107a457600080fd5b810190808051906020019092919050505090506000809054906101000a90046001600160a01b03166001600160a01b03166323b872dd33308f6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d602081101561086f57600080fd5b8101908080519060200190929190505050506000809054906101000a90046001600160a01b03166001600160a01b03166342966c688d6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156108db57600080fd5b505af11580156108ef573d6000803e3d6000fd5b5050505082610907838e610fc690919063ffffffff16565b8161090e57fe5b049650826109228d8363ffffffff610fc616565b8161092957fe5b60015460008054604080516323b872dd60e01b81526001600160a01b0392831660048201528f83166024820152604481018e90529051959094049a50909116926323b872dd926064808201936020939283900390910190829087803b15801561099157600080fd5b505af11580156109a5573d6000803e3d6000fd5b505050506040513d60208110156109bb57600080fd5b505060025460008054604080516323b872dd60e01b81526001600160a01b0392831660048201528d83166024820152604481018b9052905191909316926323b872dd9260648083019360209390929083900390910190829087803b158015610a2257600080fd5b505af1158015610a36573d6000803e3d6000fd5b505050506040513d6020811015610a4c57600080fd5b50969e959d50949b505050505050505050505050565b610a6c8383610ee8565b600280546001600160a01b03199081166001600160a01b0393841617909155600180548216938316939093179092556000805490921692169190911790555050565b600090565b6000806000806000610ac58d8d610ee8565b60015491935091506001600160a01b03808416911614610b165760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6002546001600160a01b03828116911614610b625760405162461bcd60e51b81526004018080602001828103825260258152602001806111ae6025913960400191505060405180910390fd5b6001546001600160a01b038e8116911614610b7e57898b610b81565b8a8a5b60015460008054604080516323b872dd60e01b81523360048201526001600160a01b039283166024820152604481018790529051959a50939850909116926323b872dd926064808201936020939283900390910190829087803b158015610be757600080fd5b505af1158015610bfb573d6000803e3d6000fd5b505050506040513d6020811015610c1157600080fd5b505060025460008054604080516323b872dd60e01b81523360048201526001600160a01b03928316602482015260448101899052905191909316926323b872dd9260648083019360209390929083900390910190829087803b158015610c7657600080fd5b505af1158015610c8a573d6000803e3d6000fd5b505050506040513d6020811015610ca057600080fd5b50610cb39050858563ffffffff61102616565b92506000809054906101000a90046001600160a01b03166001600160a01b031663a0712d68846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610d0f57600080fd5b505af1158015610d23573d6000803e3d6000fd5b505050506040513d6020811015610d3957600080fd5b5050600080546040805163a9059cbb60e01b81526001600160a01b038b81166004830152602482018890529151919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610d9457600080fd5b505af1158015610da8573d6000803e3d6000fd5b505050506040513d6020811015610dbe57600080fd5b50949d939c50919a509198505050505050505050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1057600080fd5b505afa158015610e24573d6000803e3d6000fd5b505050506040513d6020811015610e3a57600080fd5b505160ff16905060048110801590610e53575060128111155b6105765760405162461bcd60e51b81526004018080602001828103825260298152602001806111856029913960400191505060405180910390fd5b6000808260000b1315610eb957610eb283600084900b600a0a63ffffffff610fc616565b9250610ee1565b60008260000b1215610ee157610ede836000848103900b600a0a63ffffffff61108016565b92505b5090919050565b600080826001600160a01b0316846001600160a01b03161415610f3c5760405162461bcd60e51b81526004018080602001828103825260258152602001806111606025913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610610f5c578284610f5f565b83835b90925090506001600160a01b038216610fbf576040805162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015290519081900360640190fd5b9250929050565b600082610fd557506000610576565b82820282848281610fe257fe5b041461101f5760405162461bcd60e51b81526004018080602001828103825260218152602001806111d36021913960400191505060405180910390fd5b9392505050565b60008282018381101561101f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061101f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250600081836111495760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561110e5781810151838201526020016110f6565b50505050905090810190601f16801561113b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161115557fe5b049594505050505056fe556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553546f6b656e206d75737420686176652073756666696369656e7420646563696d616c20706c616365734d6f636b556e69737761705632526f757465723a20446966666572656e7420746f6b656e73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72315820419dd7f485ad692a161402b27ae473770c954049f0db33888649f9d80e1eaee964736f6c634300050b0032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}