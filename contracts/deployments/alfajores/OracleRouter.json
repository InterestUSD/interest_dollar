{
  "address": "0x4F3871ff02FE9cE6F11EBE0DFBb8720f8b3645A1",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "setFeed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7ada8fc87f1f323360eebbac2e28bf729b082101544ef35b41358a45ac5389d",
  "receipt": {
    "to": null,
    "from": "0x95dD1b944cD3c36b1097Ac436235da1388D784B6",
    "contractAddress": "0x4F3871ff02FE9cE6F11EBE0DFBb8720f8b3645A1",
    "transactionIndex": 0,
    "gasUsed": "153913",
    "logsBloom": "0x
    "blockHash": "0xc4b4b4dd1d669b7f05cb5668840ea03a36abc75f1bd4fcd68b138177ff96957f",
    "transactionHash": "0xf7ada8fc87f1f323360eebbac2e28bf729b082101544ef35b41358a45ac5389d",
    "logs": [],
    "blockNumber": 5596482,
    "cumulativeGasUsed": "153913",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "42a123be17d7a90d2dc878199b6cae0a",
  "metadata": "{\"compiler\":{\"version\":\"0.5.11+commit.22be8592\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"setFeed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleRouter.sol\":\"OracleRouterDev\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface IRegistry {\\n    function getAddressForOrDie(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x293db0123a841530c2ee31864feed3c80ada82ca9c6ae24c4e92dc5f658715d4\"},\"contracts/interfaces/ISortedOracles.sol\":{\"content\":\"pragma solidity 0.5.11;\\n\\ninterface ISortedOracles {\\n    function medianRate(address) external view returns (uint256, uint256);\\n\\n    function medianTimestamp(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5190bc150c55411bab3a5a19325923e26315028410935aa35b8dff27837844f2\"},\"contracts/oracle/OracleRouter.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { UsingRegistry } from \\\"../utils/UsingRegistry.sol\\\";\\nimport { ISortedOracles } from \\\"../interfaces/ISortedOracles.sol\\\";\\n\\ncontract OracleRouterBase is UsingRegistry {\\n    using SafeMath for uint256;\\n    uint256 constant MIN_DRIFT = uint256(70000000);\\n    uint256 constant MAX_DRIFT = uint256(130000000);\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal view returns (address);\\n\\n    /**\\n     * @notice Returns the total price in 18 digit cUSD for a given asset.\\n     * @param asset address of the asset\\n     * @return uint256 cUSD price of 1 of the asset, in 18 decimal fixed\\n     */\\n    function price(address asset) external view returns (uint256) {\\n        // if cUSD\\n        address cUSD_addr = getStableToken();\\n        if (asset == cUSD_addr) {\\n            return 1 ether;\\n        } else if (asset == getStableTokenEUR()) {\\n            return\\n                _asset_price(asset).mul(1 ether).div(_asset_price(cUSD_addr));\\n        } else {\\n            require(false, \\\"Asset not available\\\");\\n        }\\n    }\\n\\n    function _asset_price(address asset) internal view returns (uint256);\\n}\\n\\ncontract OracleRouter is OracleRouterBase {\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal view returns (address) {\\n        return address(0x000000000000000000000000000000000000ce10);\\n    }\\n\\n    function _asset_price(address asset) internal view returns (uint256) {\\n        uint256 _price;\\n        uint256 _divisor;\\n        ISortedOracles _oracles = getSortedOracles();\\n        (_price, _divisor) = _oracles.medianRate(asset);\\n        require(_price > 0, \\\"Reported price is 0\\\");\\n        uint256 _reportTime = _oracles.medianTimestamp(asset);\\n        require(\\n            block.timestamp.sub(_reportTime) < 10 minutes,\\n            \\\"Reported price is older than 10 minutes\\\"\\n        );\\n        return _divisor.mul(1 ether).div(_price);\\n    }\\n}\\n\\ncontract OracleRouterDev {\\n    mapping(address => address) public assetToFeed;\\n\\n    mapping(address => uint256) public assetToPrice;\\n\\n    function setFeed(address _asset, address _feed) external {\\n        assetToFeed[_asset] = _feed;\\n    }\\n\\n    function setPrice(address _asset, uint256 _price) external {\\n        assetToPrice[_asset] = _price;\\n    }\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal view returns (address) {\\n        return assetToFeed[asset];\\n    }\\n\\n    function price(address asset) internal view returns (uint256) {\\n        return assetToPrice[asset];\\n    }\\n}\\n\",\"keccak256\":\"0xb1c2b84231ea7e6365ec4b0ad596129c1f6a8f5bde51a8f8fcabc15b80ab6b62\"},\"contracts/utils/UsingRegistry.sol\":{\"content\":\"pragma solidity ^0.5.11;\\n\\n/**\\n * @title Celo Registry Helper\\n * @notice The VaultAdmin contract makes configuration and admin calls on the vault.\\n * @author Ashutosh Varma (@ashutoshvarma)\\n */\\n\\nimport { IRegistry } from \\\"../interfaces/IRegistry.sol\\\";\\nimport { ISortedOracles } from \\\"../interfaces/ISortedOracles.sol\\\";\\n\\ncontract UsingRegistry {\\n    bytes32 constant GOLD_TOKEN_REGISTRY_ID =\\n        keccak256(abi.encodePacked(\\\"GoldToken\\\"));\\n    bytes32 constant STABLE_TOKEN_REGISTRY_ID =\\n        keccak256(abi.encodePacked(\\\"StableToken\\\"));\\n    bytes32 constant STABLE_EUR_TOKEN_REGISTRY_ID =\\n        keccak256(abi.encodePacked(\\\"StableTokenEUR\\\"));\\n    bytes32 constant SORTED_ORACLES_REGISTRY_ID =\\n        keccak256(abi.encodePacked(\\\"SortedOracles\\\"));\\n\\n    IRegistry public constant registry =\\n        IRegistry(0x000000000000000000000000000000000000ce10);\\n\\n    function getGoldToken() internal view returns (address) {\\n        return registry.getAddressForOrDie(GOLD_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getStableToken() internal view returns (address) {\\n        return registry.getAddressForOrDie(STABLE_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getStableTokenEUR() internal view returns (address) {\\n        return registry.getAddressForOrDie(STABLE_EUR_TOKEN_REGISTRY_ID);\\n    }\\n\\n    function getSortedOracles() internal view returns (ISortedOracles) {\\n        return\\n            ISortedOracles(\\n                registry.getAddressForOrDie(SORTED_ORACLES_REGISTRY_ID)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x503726f43225b34cb9203a7074eebf4d495996ac14c3c11be0dbb921b9a31ad2\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101d2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004b5760003560e01c8062e4768b1461005057806340b1eb101461007e578063491cd5c9146100ac578063e6741de2146100e4575b600080fd5b61007c6004803603604081101561006657600080fd5b506001600160a01b038135169060200135610126565b005b61007c6004803603604081101561009457600080fd5b506001600160a01b0381358116916020013516610142565b6100d2600480360360208110156100c257600080fd5b50356001600160a01b0316610170565b60408051918252519081900360200190f35b61010a600480360360208110156100fa57600080fd5b50356001600160a01b0316610182565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b03909116600090815260016020526040902055565b6001600160a01b03918216600090815260208190526040902080546001600160a01b03191691909216179055565b60016020526000908152604090205481565b6000602081905290815260409020546001600160a01b03168156fea265627a7a72315820ac8df26f20e21d0ecba373a95f310084e477c2de8dcc5a1fedce75f1b253b2a364736f6c634300050b0032",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004b5760003560e01c8062e4768b1461005057806340b1eb101461007e578063491cd5c9146100ac578063e6741de2146100e4575b600080fd5b61007c6004803603604081101561006657600080fd5b506001600160a01b038135169060200135610126565b005b61007c6004803603604081101561009457600080fd5b506001600160a01b0381358116916020013516610142565b6100d2600480360360208110156100c257600080fd5b50356001600160a01b0316610170565b60408051918252519081900360200190f35b61010a600480360360208110156100fa57600080fd5b50356001600160a01b0316610182565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b03909116600090815260016020526040902055565b6001600160a01b03918216600090815260208190526040902080546001600160a01b03191691909216179055565b60016020526000908152604090205481565b6000602081905290815260409020546001600160a01b03168156fea265627a7a72315820ac8df26f20e21d0ecba373a95f310084e477c2de8dcc5a1fedce75f1b253b2a364736f6c634300050b0032",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}